-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmv_mult_axis is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_VECT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_VECT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_VECT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VECT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_VECT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VECT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VECT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VECT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VECT_USER_VALUE : INTEGER := 0;
    C_M_AXI_VECT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_VECT_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_vect_AWVALID : OUT STD_LOGIC;
    m_axi_vect_AWREADY : IN STD_LOGIC;
    m_axi_vect_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_ADDR_WIDTH-1 downto 0);
    m_axi_vect_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_ID_WIDTH-1 downto 0);
    m_axi_vect_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_vect_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_vect_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_vect_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_vect_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_vect_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_vect_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_vect_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_vect_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_AWUSER_WIDTH-1 downto 0);
    m_axi_vect_WVALID : OUT STD_LOGIC;
    m_axi_vect_WREADY : IN STD_LOGIC;
    m_axi_vect_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_DATA_WIDTH-1 downto 0);
    m_axi_vect_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_DATA_WIDTH/8-1 downto 0);
    m_axi_vect_WLAST : OUT STD_LOGIC;
    m_axi_vect_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_ID_WIDTH-1 downto 0);
    m_axi_vect_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_WUSER_WIDTH-1 downto 0);
    m_axi_vect_ARVALID : OUT STD_LOGIC;
    m_axi_vect_ARREADY : IN STD_LOGIC;
    m_axi_vect_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_ADDR_WIDTH-1 downto 0);
    m_axi_vect_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_ID_WIDTH-1 downto 0);
    m_axi_vect_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_vect_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_vect_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_vect_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_vect_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_vect_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_vect_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_vect_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_vect_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_VECT_ARUSER_WIDTH-1 downto 0);
    m_axi_vect_RVALID : IN STD_LOGIC;
    m_axi_vect_RREADY : OUT STD_LOGIC;
    m_axi_vect_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_VECT_DATA_WIDTH-1 downto 0);
    m_axi_vect_RLAST : IN STD_LOGIC;
    m_axi_vect_RID : IN STD_LOGIC_VECTOR (C_M_AXI_VECT_ID_WIDTH-1 downto 0);
    m_axi_vect_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_VECT_RUSER_WIDTH-1 downto 0);
    m_axi_vect_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_vect_BVALID : IN STD_LOGIC;
    m_axi_vect_BREADY : OUT STD_LOGIC;
    m_axi_vect_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_vect_BID : IN STD_LOGIC_VECTOR (C_M_AXI_VECT_ID_WIDTH-1 downto 0);
    m_axi_vect_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_VECT_BUSER_WIDTH-1 downto 0);
    val_col_ind_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    val_col_ind_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    val_col_ind_stream_TLAST : IN STD_LOGIC;
    rowptr_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    rowptr_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    rowptr_stream_TLAST : IN STD_LOGIC;
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_stream_TLAST : OUT STD_LOGIC;
    val_col_ind_stream_TVALID : IN STD_LOGIC;
    val_col_ind_stream_TREADY : OUT STD_LOGIC;
    rowptr_stream_TVALID : IN STD_LOGIC;
    rowptr_stream_TREADY : OUT STD_LOGIC;
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of spmv_mult_axis is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "spmv_mult_axis,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=4.500000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.492700,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=73,HLS_SYN_DSP=21,HLS_SYN_FF=10760,HLS_SYN_LUT=9842}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal val_size : STD_LOGIC_VECTOR (31 downto 0);
    signal output_size : STD_LOGIC_VECTOR (31 downto 0);
    signal vect_mem : STD_LOGIC_VECTOR (31 downto 0);
    signal vect_AWREADY : STD_LOGIC;
    signal vect_WREADY : STD_LOGIC;
    signal vect_ARREADY : STD_LOGIC;
    signal vect_RVALID : STD_LOGIC;
    signal vect_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal vect_RLAST : STD_LOGIC;
    signal vect_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal vect_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal vect_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal vect_BVALID : STD_LOGIC;
    signal vect_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal vect_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal vect_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc331494_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc331494_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc331494_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc331494_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc331494_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc331494_U0_val_col_ind_stream_TREADY : STD_LOGIC;
    signal Loop_1_proc331494_U0_val_fifo_tmp_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc331494_U0_val_fifo_tmp_V_write : STD_LOGIC;
    signal Loop_1_proc331494_U0_col_ind_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc331494_U0_col_ind_fifo_V_write : STD_LOGIC;
    signal Loop_1_proc331494_U0_val_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc331494_U0_val_size_out_write : STD_LOGIC;
    signal Loop_1_proc331494_U0_output_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc331494_U0_output_size_out_write : STD_LOGIC;
    signal Loop_1_proc331494_U0_vect_mem_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc331494_U0_vect_mem_out_write : STD_LOGIC;
    signal Loop_2_proc34_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc34_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc34_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc34_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc34_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc34_U0_start_out : STD_LOGIC;
    signal Loop_2_proc34_U0_start_write : STD_LOGIC;
    signal Loop_2_proc34_U0_val_size_read : STD_LOGIC;
    signal Loop_2_proc34_U0_val_fifo_tmp_V_read : STD_LOGIC;
    signal Loop_2_proc34_U0_val_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc34_U0_val_fifo_V_write : STD_LOGIC;
    signal Loop_2_proc34_U0_col_ind_fifo_V_read : STD_LOGIC;
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWVALID : STD_LOGIC;
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_WVALID : STD_LOGIC;
    signal Loop_2_proc34_U0_m_axi_vect_mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_WLAST : STD_LOGIC;
    signal Loop_2_proc34_U0_m_axi_vect_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARVALID : STD_LOGIC;
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc34_U0_m_axi_vect_mem_RREADY : STD_LOGIC;
    signal Loop_2_proc34_U0_m_axi_vect_mem_BREADY : STD_LOGIC;
    signal Loop_2_proc34_U0_vect_mem_offset_read : STD_LOGIC;
    signal Loop_2_proc34_U0_vect_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc34_U0_vect_fifo_V_write : STD_LOGIC;
    signal Loop_2_proc34_U0_val_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc34_U0_val_size_out_write : STD_LOGIC;
    signal Loop_3_proc35_U0_ap_start : STD_LOGIC;
    signal Loop_3_proc35_U0_ap_done : STD_LOGIC;
    signal Loop_3_proc35_U0_ap_continue : STD_LOGIC;
    signal Loop_3_proc35_U0_ap_idle : STD_LOGIC;
    signal Loop_3_proc35_U0_ap_ready : STD_LOGIC;
    signal Loop_3_proc35_U0_val_size_read : STD_LOGIC;
    signal Loop_3_proc35_U0_val_fifo_V_read : STD_LOGIC;
    signal Loop_3_proc35_U0_vect_fifo_V_read : STD_LOGIC;
    signal Loop_3_proc35_U0_mult_result_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_3_proc35_U0_mult_result_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_ap_start : STD_LOGIC;
    signal fp_add_loop_U0_ap_done : STD_LOGIC;
    signal fp_add_loop_U0_ap_continue : STD_LOGIC;
    signal fp_add_loop_U0_ap_idle : STD_LOGIC;
    signal fp_add_loop_U0_ap_ready : STD_LOGIC;
    signal fp_add_loop_U0_start_out : STD_LOGIC;
    signal fp_add_loop_U0_start_write : STD_LOGIC;
    signal fp_add_loop_U0_output_size_read : STD_LOGIC;
    signal fp_add_loop_U0_rowptr_stream_TREADY : STD_LOGIC;
    signal fp_add_loop_U0_mult_result_fifo_V_read : STD_LOGIC;
    signal fp_add_loop_U0_row_product_0_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_row_product_0_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_row_product_1_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_row_product_1_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_row_product_2_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_row_product_2_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_row_product_3_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_row_product_3_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_row_product_4_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_row_product_4_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_row_product_5_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_row_product_5_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_row_product_6_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_row_product_6_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_row_product_7_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_row_product_7_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_row_product_8_fifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_row_product_8_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_tlast_fifo_V_din : STD_LOGIC;
    signal fp_add_loop_U0_tlast_fifo_V_write : STD_LOGIC;
    signal fp_add_loop_U0_tkeep_fifo_V_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal fp_add_loop_U0_tkeep_fifo_V_V_write : STD_LOGIC;
    signal fp_add_loop_U0_output_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_add_loop_U0_output_size_out_write : STD_LOGIC;
    signal Loop_4_proc36_U0_ap_start : STD_LOGIC;
    signal Loop_4_proc36_U0_ap_done : STD_LOGIC;
    signal Loop_4_proc36_U0_ap_continue : STD_LOGIC;
    signal Loop_4_proc36_U0_ap_idle : STD_LOGIC;
    signal Loop_4_proc36_U0_ap_ready : STD_LOGIC;
    signal Loop_4_proc36_U0_output_size_read : STD_LOGIC;
    signal Loop_4_proc36_U0_row_product_0_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_row_product_1_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_row_product_2_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_row_product_3_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_row_product_4_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_row_product_5_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_row_product_6_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_row_product_7_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_row_product_8_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_tlast_fifo_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_tkeep_fifo_V_V_read : STD_LOGIC;
    signal Loop_4_proc36_U0_output_stream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_4_proc36_U0_output_stream_TVALID : STD_LOGIC;
    signal Loop_4_proc36_U0_output_stream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_4_proc36_U0_output_stream_TLAST : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal val_fifo_tmp_V_full_n : STD_LOGIC;
    signal val_fifo_tmp_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fifo_tmp_V_empty_n : STD_LOGIC;
    signal col_ind_fifo_V_full_n : STD_LOGIC;
    signal col_ind_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ind_fifo_V_empty_n : STD_LOGIC;
    signal val_size_c_full_n : STD_LOGIC;
    signal val_size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_size_c_empty_n : STD_LOGIC;
    signal output_size_c_full_n : STD_LOGIC;
    signal output_size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal output_size_c_empty_n : STD_LOGIC;
    signal vect_mem_c_full_n : STD_LOGIC;
    signal vect_mem_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal vect_mem_c_empty_n : STD_LOGIC;
    signal val_fifo_V_full_n : STD_LOGIC;
    signal val_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fifo_V_empty_n : STD_LOGIC;
    signal vect_fifo_V_full_n : STD_LOGIC;
    signal vect_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal vect_fifo_V_empty_n : STD_LOGIC;
    signal val_size_c11_full_n : STD_LOGIC;
    signal val_size_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_size_c11_empty_n : STD_LOGIC;
    signal mult_result_fifo_V_full_n : STD_LOGIC;
    signal mult_result_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mult_result_fifo_V_empty_n : STD_LOGIC;
    signal row_product_0_fifo_V_full_n : STD_LOGIC;
    signal row_product_0_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal row_product_0_fifo_V_empty_n : STD_LOGIC;
    signal row_product_1_fifo_V_full_n : STD_LOGIC;
    signal row_product_1_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal row_product_1_fifo_V_empty_n : STD_LOGIC;
    signal row_product_2_fifo_V_full_n : STD_LOGIC;
    signal row_product_2_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal row_product_2_fifo_V_empty_n : STD_LOGIC;
    signal row_product_3_fifo_V_full_n : STD_LOGIC;
    signal row_product_3_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal row_product_3_fifo_V_empty_n : STD_LOGIC;
    signal row_product_4_fifo_V_full_n : STD_LOGIC;
    signal row_product_4_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal row_product_4_fifo_V_empty_n : STD_LOGIC;
    signal row_product_5_fifo_V_full_n : STD_LOGIC;
    signal row_product_5_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal row_product_5_fifo_V_empty_n : STD_LOGIC;
    signal row_product_6_fifo_V_full_n : STD_LOGIC;
    signal row_product_6_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal row_product_6_fifo_V_empty_n : STD_LOGIC;
    signal row_product_7_fifo_V_full_n : STD_LOGIC;
    signal row_product_7_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal row_product_7_fifo_V_empty_n : STD_LOGIC;
    signal row_product_8_fifo_V_full_n : STD_LOGIC;
    signal row_product_8_fifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal row_product_8_fifo_V_empty_n : STD_LOGIC;
    signal tlast_fifo_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal tlast_fifo_V_full_n : STD_LOGIC;
    signal tlast_fifo_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal tlast_fifo_V_empty_n : STD_LOGIC;
    signal tkeep_fifo_V_V_full_n : STD_LOGIC;
    signal tkeep_fifo_V_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal tkeep_fifo_V_V_empty_n : STD_LOGIC;
    signal output_size_c12_full_n : STD_LOGIC;
    signal output_size_c12_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal output_size_c12_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_2_proc34_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_2_proc34_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc34_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_1_proc331494_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_1_proc331494_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc331494_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_fp_add_loop_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_fp_add_loop_U0_ap_ready : STD_LOGIC;
    signal fp_add_loop_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Loop_1_proc331494_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc331494_U0_start_write : STD_LOGIC;
    signal start_for_Loop_3_proc35_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_3_proc35_U0_full_n : STD_LOGIC;
    signal start_for_Loop_3_proc35_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_3_proc35_U0_empty_n : STD_LOGIC;
    signal Loop_3_proc35_U0_start_full_n : STD_LOGIC;
    signal Loop_3_proc35_U0_start_write : STD_LOGIC;
    signal start_for_Loop_4_proc36_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_4_proc36_U0_full_n : STD_LOGIC;
    signal start_for_Loop_4_proc36_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_4_proc36_U0_empty_n : STD_LOGIC;
    signal Loop_4_proc36_U0_start_full_n : STD_LOGIC;
    signal Loop_4_proc36_U0_start_write : STD_LOGIC;

    component Loop_1_proc331494 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        val_size : IN STD_LOGIC_VECTOR (31 downto 0);
        val_col_ind_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        val_col_ind_stream_TVALID : IN STD_LOGIC;
        val_col_ind_stream_TREADY : OUT STD_LOGIC;
        val_col_ind_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        val_col_ind_stream_TLAST : IN STD_LOGIC;
        val_fifo_tmp_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_fifo_tmp_V_full_n : IN STD_LOGIC;
        val_fifo_tmp_V_write : OUT STD_LOGIC;
        col_ind_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        col_ind_fifo_V_full_n : IN STD_LOGIC;
        col_ind_fifo_V_write : OUT STD_LOGIC;
        output_size : IN STD_LOGIC_VECTOR (31 downto 0);
        val_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_size_out_full_n : IN STD_LOGIC;
        val_size_out_write : OUT STD_LOGIC;
        output_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_size_out_full_n : IN STD_LOGIC;
        output_size_out_write : OUT STD_LOGIC;
        vect_mem : IN STD_LOGIC_VECTOR (31 downto 0);
        vect_mem_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        vect_mem_out_full_n : IN STD_LOGIC;
        vect_mem_out_write : OUT STD_LOGIC );
    end component;


    component Loop_2_proc34 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        val_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        val_size_empty_n : IN STD_LOGIC;
        val_size_read : OUT STD_LOGIC;
        val_fifo_tmp_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        val_fifo_tmp_V_empty_n : IN STD_LOGIC;
        val_fifo_tmp_V_read : OUT STD_LOGIC;
        val_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_fifo_V_full_n : IN STD_LOGIC;
        val_fifo_V_write : OUT STD_LOGIC;
        col_ind_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        col_ind_fifo_V_empty_n : IN STD_LOGIC;
        col_ind_fifo_V_read : OUT STD_LOGIC;
        m_axi_vect_mem_AWVALID : OUT STD_LOGIC;
        m_axi_vect_mem_AWREADY : IN STD_LOGIC;
        m_axi_vect_mem_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_vect_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_vect_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_vect_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_vect_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_vect_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_vect_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_vect_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_vect_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_vect_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_vect_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_vect_mem_WVALID : OUT STD_LOGIC;
        m_axi_vect_mem_WREADY : IN STD_LOGIC;
        m_axi_vect_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_vect_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_vect_mem_WLAST : OUT STD_LOGIC;
        m_axi_vect_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_vect_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_vect_mem_ARVALID : OUT STD_LOGIC;
        m_axi_vect_mem_ARREADY : IN STD_LOGIC;
        m_axi_vect_mem_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_vect_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_vect_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_vect_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_vect_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_vect_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_vect_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_vect_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_vect_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_vect_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_vect_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_vect_mem_RVALID : IN STD_LOGIC;
        m_axi_vect_mem_RREADY : OUT STD_LOGIC;
        m_axi_vect_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_vect_mem_RLAST : IN STD_LOGIC;
        m_axi_vect_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_vect_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_vect_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_vect_mem_BVALID : IN STD_LOGIC;
        m_axi_vect_mem_BREADY : OUT STD_LOGIC;
        m_axi_vect_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_vect_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_vect_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        vect_mem_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        vect_mem_offset_empty_n : IN STD_LOGIC;
        vect_mem_offset_read : OUT STD_LOGIC;
        vect_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        vect_fifo_V_full_n : IN STD_LOGIC;
        vect_fifo_V_write : OUT STD_LOGIC;
        val_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_size_out_full_n : IN STD_LOGIC;
        val_size_out_write : OUT STD_LOGIC );
    end component;


    component Loop_3_proc35 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        val_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        val_size_empty_n : IN STD_LOGIC;
        val_size_read : OUT STD_LOGIC;
        val_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        val_fifo_V_empty_n : IN STD_LOGIC;
        val_fifo_V_read : OUT STD_LOGIC;
        vect_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        vect_fifo_V_empty_n : IN STD_LOGIC;
        vect_fifo_V_read : OUT STD_LOGIC;
        mult_result_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mult_result_fifo_V_full_n : IN STD_LOGIC;
        mult_result_fifo_V_write : OUT STD_LOGIC );
    end component;


    component fp_add_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        output_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        output_size_empty_n : IN STD_LOGIC;
        output_size_read : OUT STD_LOGIC;
        rowptr_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        rowptr_stream_TVALID : IN STD_LOGIC;
        rowptr_stream_TREADY : OUT STD_LOGIC;
        rowptr_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        rowptr_stream_TLAST : IN STD_LOGIC;
        mult_result_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        mult_result_fifo_V_empty_n : IN STD_LOGIC;
        mult_result_fifo_V_read : OUT STD_LOGIC;
        row_product_0_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_product_0_fifo_V_full_n : IN STD_LOGIC;
        row_product_0_fifo_V_write : OUT STD_LOGIC;
        row_product_1_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_product_1_fifo_V_full_n : IN STD_LOGIC;
        row_product_1_fifo_V_write : OUT STD_LOGIC;
        row_product_2_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_product_2_fifo_V_full_n : IN STD_LOGIC;
        row_product_2_fifo_V_write : OUT STD_LOGIC;
        row_product_3_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_product_3_fifo_V_full_n : IN STD_LOGIC;
        row_product_3_fifo_V_write : OUT STD_LOGIC;
        row_product_4_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_product_4_fifo_V_full_n : IN STD_LOGIC;
        row_product_4_fifo_V_write : OUT STD_LOGIC;
        row_product_5_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_product_5_fifo_V_full_n : IN STD_LOGIC;
        row_product_5_fifo_V_write : OUT STD_LOGIC;
        row_product_6_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_product_6_fifo_V_full_n : IN STD_LOGIC;
        row_product_6_fifo_V_write : OUT STD_LOGIC;
        row_product_7_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_product_7_fifo_V_full_n : IN STD_LOGIC;
        row_product_7_fifo_V_write : OUT STD_LOGIC;
        row_product_8_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_product_8_fifo_V_full_n : IN STD_LOGIC;
        row_product_8_fifo_V_write : OUT STD_LOGIC;
        tlast_fifo_V_din : OUT STD_LOGIC;
        tlast_fifo_V_full_n : IN STD_LOGIC;
        tlast_fifo_V_write : OUT STD_LOGIC;
        tkeep_fifo_V_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        tkeep_fifo_V_V_full_n : IN STD_LOGIC;
        tkeep_fifo_V_V_write : OUT STD_LOGIC;
        output_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_size_out_full_n : IN STD_LOGIC;
        output_size_out_write : OUT STD_LOGIC );
    end component;


    component Loop_4_proc36 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        output_size_empty_n : IN STD_LOGIC;
        output_size_read : OUT STD_LOGIC;
        row_product_0_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        row_product_0_fifo_V_empty_n : IN STD_LOGIC;
        row_product_0_fifo_V_read : OUT STD_LOGIC;
        row_product_1_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        row_product_1_fifo_V_empty_n : IN STD_LOGIC;
        row_product_1_fifo_V_read : OUT STD_LOGIC;
        row_product_2_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        row_product_2_fifo_V_empty_n : IN STD_LOGIC;
        row_product_2_fifo_V_read : OUT STD_LOGIC;
        row_product_3_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        row_product_3_fifo_V_empty_n : IN STD_LOGIC;
        row_product_3_fifo_V_read : OUT STD_LOGIC;
        row_product_4_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        row_product_4_fifo_V_empty_n : IN STD_LOGIC;
        row_product_4_fifo_V_read : OUT STD_LOGIC;
        row_product_5_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        row_product_5_fifo_V_empty_n : IN STD_LOGIC;
        row_product_5_fifo_V_read : OUT STD_LOGIC;
        row_product_6_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        row_product_6_fifo_V_empty_n : IN STD_LOGIC;
        row_product_6_fifo_V_read : OUT STD_LOGIC;
        row_product_7_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        row_product_7_fifo_V_empty_n : IN STD_LOGIC;
        row_product_7_fifo_V_read : OUT STD_LOGIC;
        row_product_8_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        row_product_8_fifo_V_empty_n : IN STD_LOGIC;
        row_product_8_fifo_V_read : OUT STD_LOGIC;
        tlast_fifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        tlast_fifo_V_empty_n : IN STD_LOGIC;
        tlast_fifo_V_read : OUT STD_LOGIC;
        tkeep_fifo_V_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        tkeep_fifo_V_V_empty_n : IN STD_LOGIC;
        tkeep_fifo_V_V_read : OUT STD_LOGIC;
        output_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_stream_TVALID : OUT STD_LOGIC;
        output_stream_TREADY : IN STD_LOGIC;
        output_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_stream_TLAST : OUT STD_LOGIC );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w4_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_3_dEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_4_eOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component spmv_mult_axis_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        val_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        vect_mem : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmv_mult_axis_vect_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    spmv_mult_axis_AXILiteS_s_axi_U : component spmv_mult_axis_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        val_size => val_size,
        output_size => output_size,
        vect_mem => vect_mem);

    spmv_mult_axis_vect_m_axi_U : component spmv_mult_axis_vect_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 2053,
        NUM_READ_OUTSTANDING => 2048,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_VECT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_VECT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_VECT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_VECT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_VECT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_VECT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_VECT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_VECT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_VECT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_VECT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_VECT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_vect_AWVALID,
        AWREADY => m_axi_vect_AWREADY,
        AWADDR => m_axi_vect_AWADDR,
        AWID => m_axi_vect_AWID,
        AWLEN => m_axi_vect_AWLEN,
        AWSIZE => m_axi_vect_AWSIZE,
        AWBURST => m_axi_vect_AWBURST,
        AWLOCK => m_axi_vect_AWLOCK,
        AWCACHE => m_axi_vect_AWCACHE,
        AWPROT => m_axi_vect_AWPROT,
        AWQOS => m_axi_vect_AWQOS,
        AWREGION => m_axi_vect_AWREGION,
        AWUSER => m_axi_vect_AWUSER,
        WVALID => m_axi_vect_WVALID,
        WREADY => m_axi_vect_WREADY,
        WDATA => m_axi_vect_WDATA,
        WSTRB => m_axi_vect_WSTRB,
        WLAST => m_axi_vect_WLAST,
        WID => m_axi_vect_WID,
        WUSER => m_axi_vect_WUSER,
        ARVALID => m_axi_vect_ARVALID,
        ARREADY => m_axi_vect_ARREADY,
        ARADDR => m_axi_vect_ARADDR,
        ARID => m_axi_vect_ARID,
        ARLEN => m_axi_vect_ARLEN,
        ARSIZE => m_axi_vect_ARSIZE,
        ARBURST => m_axi_vect_ARBURST,
        ARLOCK => m_axi_vect_ARLOCK,
        ARCACHE => m_axi_vect_ARCACHE,
        ARPROT => m_axi_vect_ARPROT,
        ARQOS => m_axi_vect_ARQOS,
        ARREGION => m_axi_vect_ARREGION,
        ARUSER => m_axi_vect_ARUSER,
        RVALID => m_axi_vect_RVALID,
        RREADY => m_axi_vect_RREADY,
        RDATA => m_axi_vect_RDATA,
        RLAST => m_axi_vect_RLAST,
        RID => m_axi_vect_RID,
        RUSER => m_axi_vect_RUSER,
        RRESP => m_axi_vect_RRESP,
        BVALID => m_axi_vect_BVALID,
        BREADY => m_axi_vect_BREADY,
        BRESP => m_axi_vect_BRESP,
        BID => m_axi_vect_BID,
        BUSER => m_axi_vect_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Loop_2_proc34_U0_m_axi_vect_mem_ARVALID,
        I_ARREADY => vect_ARREADY,
        I_ARADDR => Loop_2_proc34_U0_m_axi_vect_mem_ARADDR,
        I_ARID => Loop_2_proc34_U0_m_axi_vect_mem_ARID,
        I_ARLEN => Loop_2_proc34_U0_m_axi_vect_mem_ARLEN,
        I_ARSIZE => Loop_2_proc34_U0_m_axi_vect_mem_ARSIZE,
        I_ARLOCK => Loop_2_proc34_U0_m_axi_vect_mem_ARLOCK,
        I_ARCACHE => Loop_2_proc34_U0_m_axi_vect_mem_ARCACHE,
        I_ARQOS => Loop_2_proc34_U0_m_axi_vect_mem_ARQOS,
        I_ARPROT => Loop_2_proc34_U0_m_axi_vect_mem_ARPROT,
        I_ARUSER => Loop_2_proc34_U0_m_axi_vect_mem_ARUSER,
        I_ARBURST => Loop_2_proc34_U0_m_axi_vect_mem_ARBURST,
        I_ARREGION => Loop_2_proc34_U0_m_axi_vect_mem_ARREGION,
        I_RVALID => vect_RVALID,
        I_RREADY => Loop_2_proc34_U0_m_axi_vect_mem_RREADY,
        I_RDATA => vect_RDATA,
        I_RID => vect_RID,
        I_RUSER => vect_RUSER,
        I_RRESP => vect_RRESP,
        I_RLAST => vect_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => vect_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => vect_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => vect_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => vect_BRESP,
        I_BID => vect_BID,
        I_BUSER => vect_BUSER);

    Loop_1_proc331494_U0 : component Loop_1_proc331494
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc331494_U0_ap_start,
        ap_done => Loop_1_proc331494_U0_ap_done,
        ap_continue => Loop_1_proc331494_U0_ap_continue,
        ap_idle => Loop_1_proc331494_U0_ap_idle,
        ap_ready => Loop_1_proc331494_U0_ap_ready,
        val_size => val_size,
        val_col_ind_stream_TDATA => val_col_ind_stream_TDATA,
        val_col_ind_stream_TVALID => val_col_ind_stream_TVALID,
        val_col_ind_stream_TREADY => Loop_1_proc331494_U0_val_col_ind_stream_TREADY,
        val_col_ind_stream_TKEEP => val_col_ind_stream_TKEEP,
        val_col_ind_stream_TLAST => val_col_ind_stream_TLAST,
        val_fifo_tmp_V_din => Loop_1_proc331494_U0_val_fifo_tmp_V_din,
        val_fifo_tmp_V_full_n => val_fifo_tmp_V_full_n,
        val_fifo_tmp_V_write => Loop_1_proc331494_U0_val_fifo_tmp_V_write,
        col_ind_fifo_V_din => Loop_1_proc331494_U0_col_ind_fifo_V_din,
        col_ind_fifo_V_full_n => col_ind_fifo_V_full_n,
        col_ind_fifo_V_write => Loop_1_proc331494_U0_col_ind_fifo_V_write,
        output_size => output_size,
        val_size_out_din => Loop_1_proc331494_U0_val_size_out_din,
        val_size_out_full_n => val_size_c_full_n,
        val_size_out_write => Loop_1_proc331494_U0_val_size_out_write,
        output_size_out_din => Loop_1_proc331494_U0_output_size_out_din,
        output_size_out_full_n => output_size_c_full_n,
        output_size_out_write => Loop_1_proc331494_U0_output_size_out_write,
        vect_mem => vect_mem,
        vect_mem_out_din => Loop_1_proc331494_U0_vect_mem_out_din,
        vect_mem_out_full_n => vect_mem_c_full_n,
        vect_mem_out_write => Loop_1_proc331494_U0_vect_mem_out_write);

    Loop_2_proc34_U0 : component Loop_2_proc34
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_2_proc34_U0_ap_start,
        start_full_n => start_for_Loop_3_proc35_U0_full_n,
        ap_done => Loop_2_proc34_U0_ap_done,
        ap_continue => Loop_2_proc34_U0_ap_continue,
        ap_idle => Loop_2_proc34_U0_ap_idle,
        ap_ready => Loop_2_proc34_U0_ap_ready,
        start_out => Loop_2_proc34_U0_start_out,
        start_write => Loop_2_proc34_U0_start_write,
        val_size_dout => val_size_c_dout,
        val_size_empty_n => val_size_c_empty_n,
        val_size_read => Loop_2_proc34_U0_val_size_read,
        val_fifo_tmp_V_dout => val_fifo_tmp_V_dout,
        val_fifo_tmp_V_empty_n => val_fifo_tmp_V_empty_n,
        val_fifo_tmp_V_read => Loop_2_proc34_U0_val_fifo_tmp_V_read,
        val_fifo_V_din => Loop_2_proc34_U0_val_fifo_V_din,
        val_fifo_V_full_n => val_fifo_V_full_n,
        val_fifo_V_write => Loop_2_proc34_U0_val_fifo_V_write,
        col_ind_fifo_V_dout => col_ind_fifo_V_dout,
        col_ind_fifo_V_empty_n => col_ind_fifo_V_empty_n,
        col_ind_fifo_V_read => Loop_2_proc34_U0_col_ind_fifo_V_read,
        m_axi_vect_mem_AWVALID => Loop_2_proc34_U0_m_axi_vect_mem_AWVALID,
        m_axi_vect_mem_AWREADY => ap_const_logic_0,
        m_axi_vect_mem_AWADDR => Loop_2_proc34_U0_m_axi_vect_mem_AWADDR,
        m_axi_vect_mem_AWID => Loop_2_proc34_U0_m_axi_vect_mem_AWID,
        m_axi_vect_mem_AWLEN => Loop_2_proc34_U0_m_axi_vect_mem_AWLEN,
        m_axi_vect_mem_AWSIZE => Loop_2_proc34_U0_m_axi_vect_mem_AWSIZE,
        m_axi_vect_mem_AWBURST => Loop_2_proc34_U0_m_axi_vect_mem_AWBURST,
        m_axi_vect_mem_AWLOCK => Loop_2_proc34_U0_m_axi_vect_mem_AWLOCK,
        m_axi_vect_mem_AWCACHE => Loop_2_proc34_U0_m_axi_vect_mem_AWCACHE,
        m_axi_vect_mem_AWPROT => Loop_2_proc34_U0_m_axi_vect_mem_AWPROT,
        m_axi_vect_mem_AWQOS => Loop_2_proc34_U0_m_axi_vect_mem_AWQOS,
        m_axi_vect_mem_AWREGION => Loop_2_proc34_U0_m_axi_vect_mem_AWREGION,
        m_axi_vect_mem_AWUSER => Loop_2_proc34_U0_m_axi_vect_mem_AWUSER,
        m_axi_vect_mem_WVALID => Loop_2_proc34_U0_m_axi_vect_mem_WVALID,
        m_axi_vect_mem_WREADY => ap_const_logic_0,
        m_axi_vect_mem_WDATA => Loop_2_proc34_U0_m_axi_vect_mem_WDATA,
        m_axi_vect_mem_WSTRB => Loop_2_proc34_U0_m_axi_vect_mem_WSTRB,
        m_axi_vect_mem_WLAST => Loop_2_proc34_U0_m_axi_vect_mem_WLAST,
        m_axi_vect_mem_WID => Loop_2_proc34_U0_m_axi_vect_mem_WID,
        m_axi_vect_mem_WUSER => Loop_2_proc34_U0_m_axi_vect_mem_WUSER,
        m_axi_vect_mem_ARVALID => Loop_2_proc34_U0_m_axi_vect_mem_ARVALID,
        m_axi_vect_mem_ARREADY => vect_ARREADY,
        m_axi_vect_mem_ARADDR => Loop_2_proc34_U0_m_axi_vect_mem_ARADDR,
        m_axi_vect_mem_ARID => Loop_2_proc34_U0_m_axi_vect_mem_ARID,
        m_axi_vect_mem_ARLEN => Loop_2_proc34_U0_m_axi_vect_mem_ARLEN,
        m_axi_vect_mem_ARSIZE => Loop_2_proc34_U0_m_axi_vect_mem_ARSIZE,
        m_axi_vect_mem_ARBURST => Loop_2_proc34_U0_m_axi_vect_mem_ARBURST,
        m_axi_vect_mem_ARLOCK => Loop_2_proc34_U0_m_axi_vect_mem_ARLOCK,
        m_axi_vect_mem_ARCACHE => Loop_2_proc34_U0_m_axi_vect_mem_ARCACHE,
        m_axi_vect_mem_ARPROT => Loop_2_proc34_U0_m_axi_vect_mem_ARPROT,
        m_axi_vect_mem_ARQOS => Loop_2_proc34_U0_m_axi_vect_mem_ARQOS,
        m_axi_vect_mem_ARREGION => Loop_2_proc34_U0_m_axi_vect_mem_ARREGION,
        m_axi_vect_mem_ARUSER => Loop_2_proc34_U0_m_axi_vect_mem_ARUSER,
        m_axi_vect_mem_RVALID => vect_RVALID,
        m_axi_vect_mem_RREADY => Loop_2_proc34_U0_m_axi_vect_mem_RREADY,
        m_axi_vect_mem_RDATA => vect_RDATA,
        m_axi_vect_mem_RLAST => vect_RLAST,
        m_axi_vect_mem_RID => vect_RID,
        m_axi_vect_mem_RUSER => vect_RUSER,
        m_axi_vect_mem_RRESP => vect_RRESP,
        m_axi_vect_mem_BVALID => ap_const_logic_0,
        m_axi_vect_mem_BREADY => Loop_2_proc34_U0_m_axi_vect_mem_BREADY,
        m_axi_vect_mem_BRESP => ap_const_lv2_0,
        m_axi_vect_mem_BID => ap_const_lv1_0,
        m_axi_vect_mem_BUSER => ap_const_lv1_0,
        vect_mem_offset_dout => vect_mem_c_dout,
        vect_mem_offset_empty_n => vect_mem_c_empty_n,
        vect_mem_offset_read => Loop_2_proc34_U0_vect_mem_offset_read,
        vect_fifo_V_din => Loop_2_proc34_U0_vect_fifo_V_din,
        vect_fifo_V_full_n => vect_fifo_V_full_n,
        vect_fifo_V_write => Loop_2_proc34_U0_vect_fifo_V_write,
        val_size_out_din => Loop_2_proc34_U0_val_size_out_din,
        val_size_out_full_n => val_size_c11_full_n,
        val_size_out_write => Loop_2_proc34_U0_val_size_out_write);

    Loop_3_proc35_U0 : component Loop_3_proc35
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_3_proc35_U0_ap_start,
        ap_done => Loop_3_proc35_U0_ap_done,
        ap_continue => Loop_3_proc35_U0_ap_continue,
        ap_idle => Loop_3_proc35_U0_ap_idle,
        ap_ready => Loop_3_proc35_U0_ap_ready,
        val_size_dout => val_size_c11_dout,
        val_size_empty_n => val_size_c11_empty_n,
        val_size_read => Loop_3_proc35_U0_val_size_read,
        val_fifo_V_dout => val_fifo_V_dout,
        val_fifo_V_empty_n => val_fifo_V_empty_n,
        val_fifo_V_read => Loop_3_proc35_U0_val_fifo_V_read,
        vect_fifo_V_dout => vect_fifo_V_dout,
        vect_fifo_V_empty_n => vect_fifo_V_empty_n,
        vect_fifo_V_read => Loop_3_proc35_U0_vect_fifo_V_read,
        mult_result_fifo_V_din => Loop_3_proc35_U0_mult_result_fifo_V_din,
        mult_result_fifo_V_full_n => mult_result_fifo_V_full_n,
        mult_result_fifo_V_write => Loop_3_proc35_U0_mult_result_fifo_V_write);

    fp_add_loop_U0 : component fp_add_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => fp_add_loop_U0_ap_start,
        start_full_n => start_for_Loop_4_proc36_U0_full_n,
        ap_done => fp_add_loop_U0_ap_done,
        ap_continue => fp_add_loop_U0_ap_continue,
        ap_idle => fp_add_loop_U0_ap_idle,
        ap_ready => fp_add_loop_U0_ap_ready,
        start_out => fp_add_loop_U0_start_out,
        start_write => fp_add_loop_U0_start_write,
        output_size_dout => output_size_c_dout,
        output_size_empty_n => output_size_c_empty_n,
        output_size_read => fp_add_loop_U0_output_size_read,
        rowptr_stream_TDATA => rowptr_stream_TDATA,
        rowptr_stream_TVALID => rowptr_stream_TVALID,
        rowptr_stream_TREADY => fp_add_loop_U0_rowptr_stream_TREADY,
        rowptr_stream_TKEEP => rowptr_stream_TKEEP,
        rowptr_stream_TLAST => rowptr_stream_TLAST,
        mult_result_fifo_V_dout => mult_result_fifo_V_dout,
        mult_result_fifo_V_empty_n => mult_result_fifo_V_empty_n,
        mult_result_fifo_V_read => fp_add_loop_U0_mult_result_fifo_V_read,
        row_product_0_fifo_V_din => fp_add_loop_U0_row_product_0_fifo_V_din,
        row_product_0_fifo_V_full_n => row_product_0_fifo_V_full_n,
        row_product_0_fifo_V_write => fp_add_loop_U0_row_product_0_fifo_V_write,
        row_product_1_fifo_V_din => fp_add_loop_U0_row_product_1_fifo_V_din,
        row_product_1_fifo_V_full_n => row_product_1_fifo_V_full_n,
        row_product_1_fifo_V_write => fp_add_loop_U0_row_product_1_fifo_V_write,
        row_product_2_fifo_V_din => fp_add_loop_U0_row_product_2_fifo_V_din,
        row_product_2_fifo_V_full_n => row_product_2_fifo_V_full_n,
        row_product_2_fifo_V_write => fp_add_loop_U0_row_product_2_fifo_V_write,
        row_product_3_fifo_V_din => fp_add_loop_U0_row_product_3_fifo_V_din,
        row_product_3_fifo_V_full_n => row_product_3_fifo_V_full_n,
        row_product_3_fifo_V_write => fp_add_loop_U0_row_product_3_fifo_V_write,
        row_product_4_fifo_V_din => fp_add_loop_U0_row_product_4_fifo_V_din,
        row_product_4_fifo_V_full_n => row_product_4_fifo_V_full_n,
        row_product_4_fifo_V_write => fp_add_loop_U0_row_product_4_fifo_V_write,
        row_product_5_fifo_V_din => fp_add_loop_U0_row_product_5_fifo_V_din,
        row_product_5_fifo_V_full_n => row_product_5_fifo_V_full_n,
        row_product_5_fifo_V_write => fp_add_loop_U0_row_product_5_fifo_V_write,
        row_product_6_fifo_V_din => fp_add_loop_U0_row_product_6_fifo_V_din,
        row_product_6_fifo_V_full_n => row_product_6_fifo_V_full_n,
        row_product_6_fifo_V_write => fp_add_loop_U0_row_product_6_fifo_V_write,
        row_product_7_fifo_V_din => fp_add_loop_U0_row_product_7_fifo_V_din,
        row_product_7_fifo_V_full_n => row_product_7_fifo_V_full_n,
        row_product_7_fifo_V_write => fp_add_loop_U0_row_product_7_fifo_V_write,
        row_product_8_fifo_V_din => fp_add_loop_U0_row_product_8_fifo_V_din,
        row_product_8_fifo_V_full_n => row_product_8_fifo_V_full_n,
        row_product_8_fifo_V_write => fp_add_loop_U0_row_product_8_fifo_V_write,
        tlast_fifo_V_din => fp_add_loop_U0_tlast_fifo_V_din,
        tlast_fifo_V_full_n => tlast_fifo_V_full_n,
        tlast_fifo_V_write => fp_add_loop_U0_tlast_fifo_V_write,
        tkeep_fifo_V_V_din => fp_add_loop_U0_tkeep_fifo_V_V_din,
        tkeep_fifo_V_V_full_n => tkeep_fifo_V_V_full_n,
        tkeep_fifo_V_V_write => fp_add_loop_U0_tkeep_fifo_V_V_write,
        output_size_out_din => fp_add_loop_U0_output_size_out_din,
        output_size_out_full_n => output_size_c12_full_n,
        output_size_out_write => fp_add_loop_U0_output_size_out_write);

    Loop_4_proc36_U0 : component Loop_4_proc36
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_4_proc36_U0_ap_start,
        ap_done => Loop_4_proc36_U0_ap_done,
        ap_continue => Loop_4_proc36_U0_ap_continue,
        ap_idle => Loop_4_proc36_U0_ap_idle,
        ap_ready => Loop_4_proc36_U0_ap_ready,
        output_size_dout => output_size_c12_dout,
        output_size_empty_n => output_size_c12_empty_n,
        output_size_read => Loop_4_proc36_U0_output_size_read,
        row_product_0_fifo_V_dout => row_product_0_fifo_V_dout,
        row_product_0_fifo_V_empty_n => row_product_0_fifo_V_empty_n,
        row_product_0_fifo_V_read => Loop_4_proc36_U0_row_product_0_fifo_V_read,
        row_product_1_fifo_V_dout => row_product_1_fifo_V_dout,
        row_product_1_fifo_V_empty_n => row_product_1_fifo_V_empty_n,
        row_product_1_fifo_V_read => Loop_4_proc36_U0_row_product_1_fifo_V_read,
        row_product_2_fifo_V_dout => row_product_2_fifo_V_dout,
        row_product_2_fifo_V_empty_n => row_product_2_fifo_V_empty_n,
        row_product_2_fifo_V_read => Loop_4_proc36_U0_row_product_2_fifo_V_read,
        row_product_3_fifo_V_dout => row_product_3_fifo_V_dout,
        row_product_3_fifo_V_empty_n => row_product_3_fifo_V_empty_n,
        row_product_3_fifo_V_read => Loop_4_proc36_U0_row_product_3_fifo_V_read,
        row_product_4_fifo_V_dout => row_product_4_fifo_V_dout,
        row_product_4_fifo_V_empty_n => row_product_4_fifo_V_empty_n,
        row_product_4_fifo_V_read => Loop_4_proc36_U0_row_product_4_fifo_V_read,
        row_product_5_fifo_V_dout => row_product_5_fifo_V_dout,
        row_product_5_fifo_V_empty_n => row_product_5_fifo_V_empty_n,
        row_product_5_fifo_V_read => Loop_4_proc36_U0_row_product_5_fifo_V_read,
        row_product_6_fifo_V_dout => row_product_6_fifo_V_dout,
        row_product_6_fifo_V_empty_n => row_product_6_fifo_V_empty_n,
        row_product_6_fifo_V_read => Loop_4_proc36_U0_row_product_6_fifo_V_read,
        row_product_7_fifo_V_dout => row_product_7_fifo_V_dout,
        row_product_7_fifo_V_empty_n => row_product_7_fifo_V_empty_n,
        row_product_7_fifo_V_read => Loop_4_proc36_U0_row_product_7_fifo_V_read,
        row_product_8_fifo_V_dout => row_product_8_fifo_V_dout,
        row_product_8_fifo_V_empty_n => row_product_8_fifo_V_empty_n,
        row_product_8_fifo_V_read => Loop_4_proc36_U0_row_product_8_fifo_V_read,
        tlast_fifo_V_dout => tlast_fifo_V_dout,
        tlast_fifo_V_empty_n => tlast_fifo_V_empty_n,
        tlast_fifo_V_read => Loop_4_proc36_U0_tlast_fifo_V_read,
        tkeep_fifo_V_V_dout => tkeep_fifo_V_V_dout,
        tkeep_fifo_V_V_empty_n => tkeep_fifo_V_V_empty_n,
        tkeep_fifo_V_V_read => Loop_4_proc36_U0_tkeep_fifo_V_V_read,
        output_stream_TDATA => Loop_4_proc36_U0_output_stream_TDATA,
        output_stream_TVALID => Loop_4_proc36_U0_output_stream_TVALID,
        output_stream_TREADY => output_stream_TREADY,
        output_stream_TKEEP => Loop_4_proc36_U0_output_stream_TKEEP,
        output_stream_TLAST => Loop_4_proc36_U0_output_stream_TLAST);

    val_fifo_tmp_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc331494_U0_val_fifo_tmp_V_din,
        if_full_n => val_fifo_tmp_V_full_n,
        if_write => Loop_1_proc331494_U0_val_fifo_tmp_V_write,
        if_dout => val_fifo_tmp_V_dout,
        if_empty_n => val_fifo_tmp_V_empty_n,
        if_read => Loop_2_proc34_U0_val_fifo_tmp_V_read);

    col_ind_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc331494_U0_col_ind_fifo_V_din,
        if_full_n => col_ind_fifo_V_full_n,
        if_write => Loop_1_proc331494_U0_col_ind_fifo_V_write,
        if_dout => col_ind_fifo_V_dout,
        if_empty_n => col_ind_fifo_V_empty_n,
        if_read => Loop_2_proc34_U0_col_ind_fifo_V_read);

    val_size_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc331494_U0_val_size_out_din,
        if_full_n => val_size_c_full_n,
        if_write => Loop_1_proc331494_U0_val_size_out_write,
        if_dout => val_size_c_dout,
        if_empty_n => val_size_c_empty_n,
        if_read => Loop_2_proc34_U0_val_size_read);

    output_size_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc331494_U0_output_size_out_din,
        if_full_n => output_size_c_full_n,
        if_write => Loop_1_proc331494_U0_output_size_out_write,
        if_dout => output_size_c_dout,
        if_empty_n => output_size_c_empty_n,
        if_read => fp_add_loop_U0_output_size_read);

    vect_mem_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc331494_U0_vect_mem_out_din,
        if_full_n => vect_mem_c_full_n,
        if_write => Loop_1_proc331494_U0_vect_mem_out_write,
        if_dout => vect_mem_c_dout,
        if_empty_n => vect_mem_c_empty_n,
        if_read => Loop_2_proc34_U0_vect_mem_offset_read);

    val_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc34_U0_val_fifo_V_din,
        if_full_n => val_fifo_V_full_n,
        if_write => Loop_2_proc34_U0_val_fifo_V_write,
        if_dout => val_fifo_V_dout,
        if_empty_n => val_fifo_V_empty_n,
        if_read => Loop_3_proc35_U0_val_fifo_V_read);

    vect_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc34_U0_vect_fifo_V_din,
        if_full_n => vect_fifo_V_full_n,
        if_write => Loop_2_proc34_U0_vect_fifo_V_write,
        if_dout => vect_fifo_V_dout,
        if_empty_n => vect_fifo_V_empty_n,
        if_read => Loop_3_proc35_U0_vect_fifo_V_read);

    val_size_c11_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc34_U0_val_size_out_din,
        if_full_n => val_size_c11_full_n,
        if_write => Loop_2_proc34_U0_val_size_out_write,
        if_dout => val_size_c11_dout,
        if_empty_n => val_size_c11_empty_n,
        if_read => Loop_3_proc35_U0_val_size_read);

    mult_result_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_3_proc35_U0_mult_result_fifo_V_din,
        if_full_n => mult_result_fifo_V_full_n,
        if_write => Loop_3_proc35_U0_mult_result_fifo_V_write,
        if_dout => mult_result_fifo_V_dout,
        if_empty_n => mult_result_fifo_V_empty_n,
        if_read => fp_add_loop_U0_mult_result_fifo_V_read);

    row_product_0_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_row_product_0_fifo_V_din,
        if_full_n => row_product_0_fifo_V_full_n,
        if_write => fp_add_loop_U0_row_product_0_fifo_V_write,
        if_dout => row_product_0_fifo_V_dout,
        if_empty_n => row_product_0_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_row_product_0_fifo_V_read);

    row_product_1_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_row_product_1_fifo_V_din,
        if_full_n => row_product_1_fifo_V_full_n,
        if_write => fp_add_loop_U0_row_product_1_fifo_V_write,
        if_dout => row_product_1_fifo_V_dout,
        if_empty_n => row_product_1_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_row_product_1_fifo_V_read);

    row_product_2_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_row_product_2_fifo_V_din,
        if_full_n => row_product_2_fifo_V_full_n,
        if_write => fp_add_loop_U0_row_product_2_fifo_V_write,
        if_dout => row_product_2_fifo_V_dout,
        if_empty_n => row_product_2_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_row_product_2_fifo_V_read);

    row_product_3_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_row_product_3_fifo_V_din,
        if_full_n => row_product_3_fifo_V_full_n,
        if_write => fp_add_loop_U0_row_product_3_fifo_V_write,
        if_dout => row_product_3_fifo_V_dout,
        if_empty_n => row_product_3_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_row_product_3_fifo_V_read);

    row_product_4_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_row_product_4_fifo_V_din,
        if_full_n => row_product_4_fifo_V_full_n,
        if_write => fp_add_loop_U0_row_product_4_fifo_V_write,
        if_dout => row_product_4_fifo_V_dout,
        if_empty_n => row_product_4_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_row_product_4_fifo_V_read);

    row_product_5_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_row_product_5_fifo_V_din,
        if_full_n => row_product_5_fifo_V_full_n,
        if_write => fp_add_loop_U0_row_product_5_fifo_V_write,
        if_dout => row_product_5_fifo_V_dout,
        if_empty_n => row_product_5_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_row_product_5_fifo_V_read);

    row_product_6_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_row_product_6_fifo_V_din,
        if_full_n => row_product_6_fifo_V_full_n,
        if_write => fp_add_loop_U0_row_product_6_fifo_V_write,
        if_dout => row_product_6_fifo_V_dout,
        if_empty_n => row_product_6_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_row_product_6_fifo_V_read);

    row_product_7_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_row_product_7_fifo_V_din,
        if_full_n => row_product_7_fifo_V_full_n,
        if_write => fp_add_loop_U0_row_product_7_fifo_V_write,
        if_dout => row_product_7_fifo_V_dout,
        if_empty_n => row_product_7_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_row_product_7_fifo_V_read);

    row_product_8_fifo_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_row_product_8_fifo_V_din,
        if_full_n => row_product_8_fifo_V_full_n,
        if_write => fp_add_loop_U0_row_product_8_fifo_V_write,
        if_dout => row_product_8_fifo_V_dout,
        if_empty_n => row_product_8_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_row_product_8_fifo_V_read);

    tlast_fifo_V_U : component fifo_w1_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tlast_fifo_V_din,
        if_full_n => tlast_fifo_V_full_n,
        if_write => fp_add_loop_U0_tlast_fifo_V_write,
        if_dout => tlast_fifo_V_dout,
        if_empty_n => tlast_fifo_V_empty_n,
        if_read => Loop_4_proc36_U0_tlast_fifo_V_read);

    tkeep_fifo_V_V_U : component fifo_w4_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_tkeep_fifo_V_V_din,
        if_full_n => tkeep_fifo_V_V_full_n,
        if_write => fp_add_loop_U0_tkeep_fifo_V_V_write,
        if_dout => tkeep_fifo_V_V_dout,
        if_empty_n => tkeep_fifo_V_V_empty_n,
        if_read => Loop_4_proc36_U0_tkeep_fifo_V_V_read);

    output_size_c12_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fp_add_loop_U0_output_size_out_din,
        if_full_n => output_size_c12_full_n,
        if_write => fp_add_loop_U0_output_size_out_write,
        if_dout => output_size_c12_dout,
        if_empty_n => output_size_c12_empty_n,
        if_read => Loop_4_proc36_U0_output_size_read);

    start_for_Loop_3_dEe_U : component start_for_Loop_3_dEe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_3_proc35_U0_din,
        if_full_n => start_for_Loop_3_proc35_U0_full_n,
        if_write => Loop_2_proc34_U0_start_write,
        if_dout => start_for_Loop_3_proc35_U0_dout,
        if_empty_n => start_for_Loop_3_proc35_U0_empty_n,
        if_read => Loop_3_proc35_U0_ap_ready);

    start_for_Loop_4_eOg_U : component start_for_Loop_4_eOg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_4_proc36_U0_din,
        if_full_n => start_for_Loop_4_proc36_U0_full_n,
        if_write => fp_add_loop_U0_start_write,
        if_dout => start_for_Loop_4_proc36_U0_dout,
        if_empty_n => start_for_Loop_4_proc36_U0_empty_n,
        if_read => Loop_4_proc36_U0_ap_ready);





    ap_sync_reg_Loop_1_proc331494_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_1_proc331494_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_1_proc331494_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_1_proc331494_U0_ap_ready <= ap_sync_Loop_1_proc331494_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_2_proc34_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_2_proc34_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_2_proc34_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_2_proc34_U0_ap_ready <= ap_sync_Loop_2_proc34_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_fp_add_loop_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_fp_add_loop_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_fp_add_loop_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_fp_add_loop_U0_ap_ready <= ap_sync_fp_add_loop_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Loop_1_proc331494_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_1_proc331494_U0_ap_ready))) then 
                Loop_1_proc331494_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc331494_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_1_proc331494_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_1_proc331494_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc331494_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_2_proc34_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_2_proc34_U0_ap_ready))) then 
                Loop_2_proc34_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_2_proc34_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_2_proc34_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_2_proc34_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_2_proc34_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    fp_add_loop_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (fp_add_loop_U0_ap_ready = ap_const_logic_0))) then 
                fp_add_loop_U0_ap_ready_count <= std_logic_vector(unsigned(fp_add_loop_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((fp_add_loop_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                fp_add_loop_U0_ap_ready_count <= std_logic_vector(unsigned(fp_add_loop_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Loop_1_proc331494_U0_ap_continue <= ap_const_logic_1;
    Loop_1_proc331494_U0_ap_start <= ((ap_sync_reg_Loop_1_proc331494_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_1_proc331494_U0_start_full_n <= ap_const_logic_1;
    Loop_1_proc331494_U0_start_write <= ap_const_logic_0;
    Loop_2_proc34_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc34_U0_ap_start <= ((ap_sync_reg_Loop_2_proc34_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_3_proc35_U0_ap_continue <= ap_const_logic_1;
    Loop_3_proc35_U0_ap_start <= start_for_Loop_3_proc35_U0_empty_n;
    Loop_3_proc35_U0_start_full_n <= ap_const_logic_1;
    Loop_3_proc35_U0_start_write <= ap_const_logic_0;
    Loop_4_proc36_U0_ap_continue <= ap_const_logic_1;
    Loop_4_proc36_U0_ap_start <= start_for_Loop_4_proc36_U0_empty_n;
    Loop_4_proc36_U0_start_full_n <= ap_const_logic_1;
    Loop_4_proc36_U0_start_write <= ap_const_logic_0;
    ap_done <= Loop_4_proc36_U0_ap_done;
    ap_idle <= (fp_add_loop_U0_ap_idle and Loop_4_proc36_U0_ap_idle and Loop_3_proc35_U0_ap_idle and Loop_2_proc34_U0_ap_idle and Loop_1_proc331494_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Loop_1_proc331494_U0_ap_ready <= (ap_sync_reg_Loop_1_proc331494_U0_ap_ready or Loop_1_proc331494_U0_ap_ready);
    ap_sync_Loop_2_proc34_U0_ap_ready <= (ap_sync_reg_Loop_2_proc34_U0_ap_ready or Loop_2_proc34_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_4_proc36_U0_ap_done;
    ap_sync_fp_add_loop_U0_ap_ready <= (fp_add_loop_U0_ap_ready or ap_sync_reg_fp_add_loop_U0_ap_ready);
    ap_sync_ready <= (ap_sync_fp_add_loop_U0_ap_ready and ap_sync_Loop_2_proc34_U0_ap_ready and ap_sync_Loop_1_proc331494_U0_ap_ready);
    fp_add_loop_U0_ap_continue <= ap_const_logic_1;
    fp_add_loop_U0_ap_start <= ((ap_sync_reg_fp_add_loop_U0_ap_ready xor ap_const_logic_1) and ap_start);
    output_stream_TDATA <= Loop_4_proc36_U0_output_stream_TDATA;
    output_stream_TKEEP <= Loop_4_proc36_U0_output_stream_TKEEP;
    output_stream_TLAST <= Loop_4_proc36_U0_output_stream_TLAST;
    output_stream_TVALID <= Loop_4_proc36_U0_output_stream_TVALID;
    rowptr_stream_TREADY <= fp_add_loop_U0_rowptr_stream_TREADY;
    start_for_Loop_3_proc35_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_4_proc36_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tlast_fifo_V_din <= (0=>fp_add_loop_U0_tlast_fifo_V_din, others=>'-');
    val_col_ind_stream_TREADY <= Loop_1_proc331494_U0_val_col_ind_stream_TREADY;
end behav;
