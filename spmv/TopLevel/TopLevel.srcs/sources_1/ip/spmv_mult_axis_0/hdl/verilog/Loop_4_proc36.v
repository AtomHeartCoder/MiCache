// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_4_proc36 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        output_size_dout,
        output_size_empty_n,
        output_size_read,
        row_product_0_fifo_V_dout,
        row_product_0_fifo_V_empty_n,
        row_product_0_fifo_V_read,
        row_product_1_fifo_V_dout,
        row_product_1_fifo_V_empty_n,
        row_product_1_fifo_V_read,
        row_product_2_fifo_V_dout,
        row_product_2_fifo_V_empty_n,
        row_product_2_fifo_V_read,
        row_product_3_fifo_V_dout,
        row_product_3_fifo_V_empty_n,
        row_product_3_fifo_V_read,
        row_product_4_fifo_V_dout,
        row_product_4_fifo_V_empty_n,
        row_product_4_fifo_V_read,
        row_product_5_fifo_V_dout,
        row_product_5_fifo_V_empty_n,
        row_product_5_fifo_V_read,
        row_product_6_fifo_V_dout,
        row_product_6_fifo_V_empty_n,
        row_product_6_fifo_V_read,
        row_product_7_fifo_V_dout,
        row_product_7_fifo_V_empty_n,
        row_product_7_fifo_V_read,
        row_product_8_fifo_V_dout,
        row_product_8_fifo_V_empty_n,
        row_product_8_fifo_V_read,
        tlast_fifo_V_dout,
        tlast_fifo_V_empty_n,
        tlast_fifo_V_read,
        tkeep_fifo_V_V_dout,
        tkeep_fifo_V_V_empty_n,
        tkeep_fifo_V_V_read,
        output_stream_TDATA,
        output_stream_TVALID,
        output_stream_TREADY,
        output_stream_TKEEP,
        output_stream_TLAST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state41 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] output_size_dout;
input   output_size_empty_n;
output   output_size_read;
input  [31:0] row_product_0_fifo_V_dout;
input   row_product_0_fifo_V_empty_n;
output   row_product_0_fifo_V_read;
input  [31:0] row_product_1_fifo_V_dout;
input   row_product_1_fifo_V_empty_n;
output   row_product_1_fifo_V_read;
input  [31:0] row_product_2_fifo_V_dout;
input   row_product_2_fifo_V_empty_n;
output   row_product_2_fifo_V_read;
input  [31:0] row_product_3_fifo_V_dout;
input   row_product_3_fifo_V_empty_n;
output   row_product_3_fifo_V_read;
input  [31:0] row_product_4_fifo_V_dout;
input   row_product_4_fifo_V_empty_n;
output   row_product_4_fifo_V_read;
input  [31:0] row_product_5_fifo_V_dout;
input   row_product_5_fifo_V_empty_n;
output   row_product_5_fifo_V_read;
input  [31:0] row_product_6_fifo_V_dout;
input   row_product_6_fifo_V_empty_n;
output   row_product_6_fifo_V_read;
input  [31:0] row_product_7_fifo_V_dout;
input   row_product_7_fifo_V_empty_n;
output   row_product_7_fifo_V_read;
input  [31:0] row_product_8_fifo_V_dout;
input   row_product_8_fifo_V_empty_n;
output   row_product_8_fifo_V_read;
input  [0:0] tlast_fifo_V_dout;
input   tlast_fifo_V_empty_n;
output   tlast_fifo_V_read;
input  [3:0] tkeep_fifo_V_V_dout;
input   tkeep_fifo_V_V_empty_n;
output   tkeep_fifo_V_V_read;
output  [31:0] output_stream_TDATA;
output   output_stream_TVALID;
input   output_stream_TREADY;
output  [3:0] output_stream_TKEEP;
output   output_stream_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_size_read;
reg row_product_0_fifo_V_read;
reg row_product_1_fifo_V_read;
reg row_product_2_fifo_V_read;
reg row_product_3_fifo_V_read;
reg row_product_4_fifo_V_read;
reg row_product_5_fifo_V_read;
reg row_product_6_fifo_V_read;
reg row_product_7_fifo_V_read;
reg row_product_8_fifo_V_read;
reg tlast_fifo_V_read;
reg tkeep_fifo_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] output_stream_V_data_1_data_out;
reg    output_stream_V_data_1_vld_in;
wire    output_stream_V_data_1_vld_out;
wire    output_stream_V_data_1_ack_in;
wire    output_stream_V_data_1_ack_out;
reg   [31:0] output_stream_V_data_1_payload_A;
reg   [31:0] output_stream_V_data_1_payload_B;
reg    output_stream_V_data_1_sel_rd;
reg    output_stream_V_data_1_sel_wr;
wire    output_stream_V_data_1_sel;
wire    output_stream_V_data_1_load_A;
wire    output_stream_V_data_1_load_B;
reg   [1:0] output_stream_V_data_1_state;
wire    output_stream_V_data_1_state_cmp_full;
reg   [3:0] output_stream_V_keep_V_1_data_out;
reg    output_stream_V_keep_V_1_vld_in;
wire    output_stream_V_keep_V_1_vld_out;
wire    output_stream_V_keep_V_1_ack_in;
wire    output_stream_V_keep_V_1_ack_out;
reg   [3:0] output_stream_V_keep_V_1_payload_A;
reg   [3:0] output_stream_V_keep_V_1_payload_B;
reg    output_stream_V_keep_V_1_sel_rd;
reg    output_stream_V_keep_V_1_sel_wr;
wire    output_stream_V_keep_V_1_sel;
wire    output_stream_V_keep_V_1_load_A;
wire    output_stream_V_keep_V_1_load_B;
reg   [1:0] output_stream_V_keep_V_1_state;
wire    output_stream_V_keep_V_1_state_cmp_full;
reg    output_stream_V_last_1_data_out;
reg    output_stream_V_last_1_vld_in;
wire    output_stream_V_last_1_vld_out;
wire    output_stream_V_last_1_ack_in;
wire    output_stream_V_last_1_ack_out;
reg    output_stream_V_last_1_payload_A;
reg    output_stream_V_last_1_payload_B;
reg    output_stream_V_last_1_sel_rd;
reg    output_stream_V_last_1_sel_wr;
wire    output_stream_V_last_1_sel;
wire    output_stream_V_last_1_load_A;
wire    output_stream_V_last_1_load_B;
reg   [1:0] output_stream_V_last_1_state;
wire    output_stream_V_last_1_state_cmp_full;
reg    output_size_blk_n;
reg    row_product_0_fifo_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_357;
reg    row_product_1_fifo_V_blk_n;
reg    row_product_2_fifo_V_blk_n;
reg    row_product_3_fifo_V_blk_n;
reg    row_product_4_fifo_V_blk_n;
reg    row_product_5_fifo_V_blk_n;
reg    row_product_6_fifo_V_blk_n;
reg    row_product_7_fifo_V_blk_n;
reg    row_product_8_fifo_V_blk_n;
reg    tlast_fifo_V_blk_n;
reg    tkeep_fifo_V_V_blk_n;
reg    output_stream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter37;
reg   [0:0] ap_reg_pp0_iter36_exitcond_i_reg_357;
reg    ap_enable_reg_pp0_iter38;
reg   [0:0] ap_reg_pp0_iter37_exitcond_i_reg_357;
reg   [31:0] i3_i_reg_297;
reg   [31:0] output_size_read_reg_352;
reg    ap_block_state1;
wire   [0:0] exitcond_i_fu_341_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_state39_pp0_stage0_iter37;
reg    ap_block_state39_io;
wire    ap_block_state40_pp0_stage0_iter38;
reg    ap_block_state40_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter3_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter4_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter5_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter6_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter7_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter8_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter9_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter10_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter11_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter12_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter13_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter14_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter15_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter16_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter17_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter18_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter19_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter20_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter21_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter22_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter23_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter24_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter25_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter26_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter27_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter28_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter29_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter30_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter31_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter32_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter33_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter34_exitcond_i_reg_357;
reg   [0:0] ap_reg_pp0_iter35_exitcond_i_reg_357;
wire   [31:0] i_fu_346_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] tmp_reg_366;
reg   [31:0] tmp_57_reg_371;
reg   [31:0] tmp_58_reg_376;
reg   [31:0] tmp_59_reg_381;
reg   [31:0] tmp_60_reg_386;
reg   [31:0] tmp_61_reg_391;
reg   [31:0] tmp_62_reg_396;
reg   [31:0] tmp_63_reg_401;
reg   [31:0] tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter2_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter3_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter4_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter5_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter6_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter7_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter8_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter9_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter10_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter11_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter12_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter13_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter14_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter15_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter16_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter17_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter18_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter19_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter20_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter21_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter22_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter23_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter24_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter25_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter26_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter27_tmp_64_reg_406;
reg   [31:0] ap_reg_pp0_iter28_tmp_64_reg_406;
reg   [0:0] tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter2_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter3_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter4_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter5_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter6_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter7_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter8_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter9_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter10_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter11_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter12_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter13_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter14_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter15_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter16_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter17_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter18_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter19_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter20_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter21_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter22_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter23_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter24_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter25_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter26_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter27_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter28_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter29_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter30_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter31_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter32_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter33_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter34_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter35_tmp_66_reg_411;
reg   [0:0] ap_reg_pp0_iter36_tmp_66_reg_411;
reg   [3:0] tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter2_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter3_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter4_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter5_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter6_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter7_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter8_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter9_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter10_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter11_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter12_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter13_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter14_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter15_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter16_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter17_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter18_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter19_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter20_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter21_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter22_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter23_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter24_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter25_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter26_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter27_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter28_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter29_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter30_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter31_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter32_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter33_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter34_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter35_tmp_V_reg_416;
reg   [3:0] ap_reg_pp0_iter36_tmp_V_reg_416;
wire   [31:0] grp_fu_308_p2;
reg   [31:0] row_product_tmp0_reg_421;
wire   [31:0] grp_fu_312_p2;
reg   [31:0] row_product_tmp1_reg_426;
wire   [31:0] grp_fu_316_p2;
reg   [31:0] row_product_tmp2_reg_431;
wire   [31:0] grp_fu_320_p2;
reg   [31:0] row_product_tmp3_reg_436;
wire   [31:0] grp_fu_324_p2;
reg   [31:0] row_product_tmp01_reg_441;
wire   [31:0] grp_fu_328_p2;
reg   [31:0] row_product_tmp23_reg_446;
wire   [31:0] grp_fu_332_p2;
reg   [31:0] row_product_tmp0123_reg_451;
wire   [31:0] grp_fu_336_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_block_pp0_stage0_01001;
reg    grp_fu_308_ce;
reg    grp_fu_312_ce;
reg    grp_fu_316_ce;
reg    grp_fu_320_ce;
reg    grp_fu_324_ce;
reg    grp_fu_328_ce;
reg    grp_fu_332_ce;
reg    grp_fu_336_ce;
wire    ap_CS_fsm_state41;
reg    ap_block_state41;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 output_stream_V_data_1_sel_rd = 1'b0;
#0 output_stream_V_data_1_sel_wr = 1'b0;
#0 output_stream_V_data_1_state = 2'd0;
#0 output_stream_V_keep_V_1_sel_rd = 1'b0;
#0 output_stream_V_keep_V_1_sel_wr = 1'b0;
#0 output_stream_V_keep_V_1_state = 2'd0;
#0 output_stream_V_last_1_sel_rd = 1'b0;
#0 output_stream_V_last_1_sel_wr = 1'b0;
#0 output_stream_V_last_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
end

spmv_mult_axis_facud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
spmv_mult_axis_facud_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_366),
    .din1(tmp_57_reg_371),
    .ce(grp_fu_308_ce),
    .dout(grp_fu_308_p2)
);

spmv_mult_axis_facud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
spmv_mult_axis_facud_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_58_reg_376),
    .din1(tmp_59_reg_381),
    .ce(grp_fu_312_ce),
    .dout(grp_fu_312_p2)
);

spmv_mult_axis_facud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
spmv_mult_axis_facud_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_60_reg_386),
    .din1(tmp_61_reg_391),
    .ce(grp_fu_316_ce),
    .dout(grp_fu_316_p2)
);

spmv_mult_axis_facud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
spmv_mult_axis_facud_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_62_reg_396),
    .din1(tmp_63_reg_401),
    .ce(grp_fu_320_ce),
    .dout(grp_fu_320_p2)
);

spmv_mult_axis_facud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
spmv_mult_axis_facud_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(row_product_tmp0_reg_421),
    .din1(row_product_tmp1_reg_426),
    .ce(grp_fu_324_ce),
    .dout(grp_fu_324_p2)
);

spmv_mult_axis_facud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
spmv_mult_axis_facud_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(row_product_tmp2_reg_431),
    .din1(row_product_tmp3_reg_436),
    .ce(grp_fu_328_ce),
    .dout(grp_fu_328_p2)
);

spmv_mult_axis_facud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
spmv_mult_axis_facud_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(row_product_tmp01_reg_441),
    .din1(row_product_tmp23_reg_446),
    .ce(grp_fu_332_ce),
    .dout(grp_fu_332_p2)
);

spmv_mult_axis_facud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
spmv_mult_axis_facud_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(row_product_tmp0123_reg_451),
    .din1(ap_reg_pp0_iter28_tmp_64_reg_406),
    .ce(grp_fu_336_ce),
    .dout(grp_fu_336_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((output_stream_V_data_1_ack_in == 1'b0) | (output_stream_V_last_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state41))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (output_size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end else if ((~((ap_start == 1'b0) | (output_size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter38 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_stream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_data_1_ack_out == 1'b1) & (output_stream_V_data_1_vld_out == 1'b1))) begin
            output_stream_V_data_1_sel_rd <= ~output_stream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_stream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_data_1_ack_in == 1'b1) & (output_stream_V_data_1_vld_in == 1'b1))) begin
            output_stream_V_data_1_sel_wr <= ~output_stream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_stream_V_data_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_data_1_state == 2'd2) & (output_stream_V_data_1_vld_in == 1'b0)) | ((output_stream_V_data_1_state == 2'd3) & (output_stream_V_data_1_vld_in == 1'b0) & (output_stream_V_data_1_ack_out == 1'b1)))) begin
            output_stream_V_data_1_state <= 2'd2;
        end else if ((((output_stream_V_data_1_state == 2'd1) & (output_stream_V_data_1_ack_out == 1'b0)) | ((output_stream_V_data_1_state == 2'd3) & (output_stream_V_data_1_ack_out == 1'b0) & (output_stream_V_data_1_vld_in == 1'b1)))) begin
            output_stream_V_data_1_state <= 2'd1;
        end else if (((~((output_stream_V_data_1_vld_in == 1'b0) & (output_stream_V_data_1_ack_out == 1'b1)) & ~((output_stream_V_data_1_ack_out == 1'b0) & (output_stream_V_data_1_vld_in == 1'b1)) & (output_stream_V_data_1_state == 2'd3)) | ((output_stream_V_data_1_state == 2'd1) & (output_stream_V_data_1_ack_out == 1'b1)) | ((output_stream_V_data_1_state == 2'd2) & (output_stream_V_data_1_vld_in == 1'b1)))) begin
            output_stream_V_data_1_state <= 2'd3;
        end else begin
            output_stream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_stream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_keep_V_1_ack_out == 1'b1) & (output_stream_V_keep_V_1_vld_out == 1'b1))) begin
            output_stream_V_keep_V_1_sel_rd <= ~output_stream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_stream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_keep_V_1_ack_in == 1'b1) & (output_stream_V_keep_V_1_vld_in == 1'b1))) begin
            output_stream_V_keep_V_1_sel_wr <= ~output_stream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_stream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_keep_V_1_state == 2'd2) & (output_stream_V_keep_V_1_vld_in == 1'b0)) | ((output_stream_V_keep_V_1_state == 2'd3) & (output_stream_V_keep_V_1_vld_in == 1'b0) & (output_stream_V_keep_V_1_ack_out == 1'b1)))) begin
            output_stream_V_keep_V_1_state <= 2'd2;
        end else if ((((output_stream_V_keep_V_1_ack_out == 1'b0) & (output_stream_V_keep_V_1_state == 2'd1)) | ((output_stream_V_keep_V_1_state == 2'd3) & (output_stream_V_keep_V_1_ack_out == 1'b0) & (output_stream_V_keep_V_1_vld_in == 1'b1)))) begin
            output_stream_V_keep_V_1_state <= 2'd1;
        end else if (((~((output_stream_V_keep_V_1_vld_in == 1'b0) & (output_stream_V_keep_V_1_ack_out == 1'b1)) & ~((output_stream_V_keep_V_1_ack_out == 1'b0) & (output_stream_V_keep_V_1_vld_in == 1'b1)) & (output_stream_V_keep_V_1_state == 2'd3)) | ((output_stream_V_keep_V_1_ack_out == 1'b1) & (output_stream_V_keep_V_1_state == 2'd1)) | ((output_stream_V_keep_V_1_state == 2'd2) & (output_stream_V_keep_V_1_vld_in == 1'b1)))) begin
            output_stream_V_keep_V_1_state <= 2'd3;
        end else begin
            output_stream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_stream_V_last_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_last_1_ack_out == 1'b1) & (output_stream_V_last_1_vld_out == 1'b1))) begin
            output_stream_V_last_1_sel_rd <= ~output_stream_V_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_stream_V_last_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_last_1_ack_in == 1'b1) & (output_stream_V_last_1_vld_in == 1'b1))) begin
            output_stream_V_last_1_sel_wr <= ~output_stream_V_last_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_stream_V_last_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_last_1_state == 2'd2) & (output_stream_V_last_1_vld_in == 1'b0)) | ((output_stream_V_last_1_state == 2'd3) & (output_stream_V_last_1_vld_in == 1'b0) & (output_stream_V_last_1_ack_out == 1'b1)))) begin
            output_stream_V_last_1_state <= 2'd2;
        end else if ((((output_stream_V_last_1_ack_out == 1'b0) & (output_stream_V_last_1_state == 2'd1)) | ((output_stream_V_last_1_state == 2'd3) & (output_stream_V_last_1_ack_out == 1'b0) & (output_stream_V_last_1_vld_in == 1'b1)))) begin
            output_stream_V_last_1_state <= 2'd1;
        end else if (((~((output_stream_V_last_1_vld_in == 1'b0) & (output_stream_V_last_1_ack_out == 1'b1)) & ~((output_stream_V_last_1_ack_out == 1'b0) & (output_stream_V_last_1_vld_in == 1'b1)) & (output_stream_V_last_1_state == 2'd3)) | ((output_stream_V_last_1_ack_out == 1'b1) & (output_stream_V_last_1_state == 2'd1)) | ((output_stream_V_last_1_state == 2'd2) & (output_stream_V_last_1_vld_in == 1'b1)))) begin
            output_stream_V_last_1_state <= 2'd3;
        end else begin
            output_stream_V_last_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_341_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i3_i_reg_297 <= i_fu_346_p2;
    end else if ((~((ap_start == 1'b0) | (output_size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i3_i_reg_297 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter10_exitcond_i_reg_357 <= ap_reg_pp0_iter9_exitcond_i_reg_357;
        ap_reg_pp0_iter10_tmp_64_reg_406 <= ap_reg_pp0_iter9_tmp_64_reg_406;
        ap_reg_pp0_iter10_tmp_66_reg_411 <= ap_reg_pp0_iter9_tmp_66_reg_411;
        ap_reg_pp0_iter10_tmp_V_reg_416 <= ap_reg_pp0_iter9_tmp_V_reg_416;
        ap_reg_pp0_iter11_exitcond_i_reg_357 <= ap_reg_pp0_iter10_exitcond_i_reg_357;
        ap_reg_pp0_iter11_tmp_64_reg_406 <= ap_reg_pp0_iter10_tmp_64_reg_406;
        ap_reg_pp0_iter11_tmp_66_reg_411 <= ap_reg_pp0_iter10_tmp_66_reg_411;
        ap_reg_pp0_iter11_tmp_V_reg_416 <= ap_reg_pp0_iter10_tmp_V_reg_416;
        ap_reg_pp0_iter12_exitcond_i_reg_357 <= ap_reg_pp0_iter11_exitcond_i_reg_357;
        ap_reg_pp0_iter12_tmp_64_reg_406 <= ap_reg_pp0_iter11_tmp_64_reg_406;
        ap_reg_pp0_iter12_tmp_66_reg_411 <= ap_reg_pp0_iter11_tmp_66_reg_411;
        ap_reg_pp0_iter12_tmp_V_reg_416 <= ap_reg_pp0_iter11_tmp_V_reg_416;
        ap_reg_pp0_iter13_exitcond_i_reg_357 <= ap_reg_pp0_iter12_exitcond_i_reg_357;
        ap_reg_pp0_iter13_tmp_64_reg_406 <= ap_reg_pp0_iter12_tmp_64_reg_406;
        ap_reg_pp0_iter13_tmp_66_reg_411 <= ap_reg_pp0_iter12_tmp_66_reg_411;
        ap_reg_pp0_iter13_tmp_V_reg_416 <= ap_reg_pp0_iter12_tmp_V_reg_416;
        ap_reg_pp0_iter14_exitcond_i_reg_357 <= ap_reg_pp0_iter13_exitcond_i_reg_357;
        ap_reg_pp0_iter14_tmp_64_reg_406 <= ap_reg_pp0_iter13_tmp_64_reg_406;
        ap_reg_pp0_iter14_tmp_66_reg_411 <= ap_reg_pp0_iter13_tmp_66_reg_411;
        ap_reg_pp0_iter14_tmp_V_reg_416 <= ap_reg_pp0_iter13_tmp_V_reg_416;
        ap_reg_pp0_iter15_exitcond_i_reg_357 <= ap_reg_pp0_iter14_exitcond_i_reg_357;
        ap_reg_pp0_iter15_tmp_64_reg_406 <= ap_reg_pp0_iter14_tmp_64_reg_406;
        ap_reg_pp0_iter15_tmp_66_reg_411 <= ap_reg_pp0_iter14_tmp_66_reg_411;
        ap_reg_pp0_iter15_tmp_V_reg_416 <= ap_reg_pp0_iter14_tmp_V_reg_416;
        ap_reg_pp0_iter16_exitcond_i_reg_357 <= ap_reg_pp0_iter15_exitcond_i_reg_357;
        ap_reg_pp0_iter16_tmp_64_reg_406 <= ap_reg_pp0_iter15_tmp_64_reg_406;
        ap_reg_pp0_iter16_tmp_66_reg_411 <= ap_reg_pp0_iter15_tmp_66_reg_411;
        ap_reg_pp0_iter16_tmp_V_reg_416 <= ap_reg_pp0_iter15_tmp_V_reg_416;
        ap_reg_pp0_iter17_exitcond_i_reg_357 <= ap_reg_pp0_iter16_exitcond_i_reg_357;
        ap_reg_pp0_iter17_tmp_64_reg_406 <= ap_reg_pp0_iter16_tmp_64_reg_406;
        ap_reg_pp0_iter17_tmp_66_reg_411 <= ap_reg_pp0_iter16_tmp_66_reg_411;
        ap_reg_pp0_iter17_tmp_V_reg_416 <= ap_reg_pp0_iter16_tmp_V_reg_416;
        ap_reg_pp0_iter18_exitcond_i_reg_357 <= ap_reg_pp0_iter17_exitcond_i_reg_357;
        ap_reg_pp0_iter18_tmp_64_reg_406 <= ap_reg_pp0_iter17_tmp_64_reg_406;
        ap_reg_pp0_iter18_tmp_66_reg_411 <= ap_reg_pp0_iter17_tmp_66_reg_411;
        ap_reg_pp0_iter18_tmp_V_reg_416 <= ap_reg_pp0_iter17_tmp_V_reg_416;
        ap_reg_pp0_iter19_exitcond_i_reg_357 <= ap_reg_pp0_iter18_exitcond_i_reg_357;
        ap_reg_pp0_iter19_tmp_64_reg_406 <= ap_reg_pp0_iter18_tmp_64_reg_406;
        ap_reg_pp0_iter19_tmp_66_reg_411 <= ap_reg_pp0_iter18_tmp_66_reg_411;
        ap_reg_pp0_iter19_tmp_V_reg_416 <= ap_reg_pp0_iter18_tmp_V_reg_416;
        ap_reg_pp0_iter20_exitcond_i_reg_357 <= ap_reg_pp0_iter19_exitcond_i_reg_357;
        ap_reg_pp0_iter20_tmp_64_reg_406 <= ap_reg_pp0_iter19_tmp_64_reg_406;
        ap_reg_pp0_iter20_tmp_66_reg_411 <= ap_reg_pp0_iter19_tmp_66_reg_411;
        ap_reg_pp0_iter20_tmp_V_reg_416 <= ap_reg_pp0_iter19_tmp_V_reg_416;
        ap_reg_pp0_iter21_exitcond_i_reg_357 <= ap_reg_pp0_iter20_exitcond_i_reg_357;
        ap_reg_pp0_iter21_tmp_64_reg_406 <= ap_reg_pp0_iter20_tmp_64_reg_406;
        ap_reg_pp0_iter21_tmp_66_reg_411 <= ap_reg_pp0_iter20_tmp_66_reg_411;
        ap_reg_pp0_iter21_tmp_V_reg_416 <= ap_reg_pp0_iter20_tmp_V_reg_416;
        ap_reg_pp0_iter22_exitcond_i_reg_357 <= ap_reg_pp0_iter21_exitcond_i_reg_357;
        ap_reg_pp0_iter22_tmp_64_reg_406 <= ap_reg_pp0_iter21_tmp_64_reg_406;
        ap_reg_pp0_iter22_tmp_66_reg_411 <= ap_reg_pp0_iter21_tmp_66_reg_411;
        ap_reg_pp0_iter22_tmp_V_reg_416 <= ap_reg_pp0_iter21_tmp_V_reg_416;
        ap_reg_pp0_iter23_exitcond_i_reg_357 <= ap_reg_pp0_iter22_exitcond_i_reg_357;
        ap_reg_pp0_iter23_tmp_64_reg_406 <= ap_reg_pp0_iter22_tmp_64_reg_406;
        ap_reg_pp0_iter23_tmp_66_reg_411 <= ap_reg_pp0_iter22_tmp_66_reg_411;
        ap_reg_pp0_iter23_tmp_V_reg_416 <= ap_reg_pp0_iter22_tmp_V_reg_416;
        ap_reg_pp0_iter24_exitcond_i_reg_357 <= ap_reg_pp0_iter23_exitcond_i_reg_357;
        ap_reg_pp0_iter24_tmp_64_reg_406 <= ap_reg_pp0_iter23_tmp_64_reg_406;
        ap_reg_pp0_iter24_tmp_66_reg_411 <= ap_reg_pp0_iter23_tmp_66_reg_411;
        ap_reg_pp0_iter24_tmp_V_reg_416 <= ap_reg_pp0_iter23_tmp_V_reg_416;
        ap_reg_pp0_iter25_exitcond_i_reg_357 <= ap_reg_pp0_iter24_exitcond_i_reg_357;
        ap_reg_pp0_iter25_tmp_64_reg_406 <= ap_reg_pp0_iter24_tmp_64_reg_406;
        ap_reg_pp0_iter25_tmp_66_reg_411 <= ap_reg_pp0_iter24_tmp_66_reg_411;
        ap_reg_pp0_iter25_tmp_V_reg_416 <= ap_reg_pp0_iter24_tmp_V_reg_416;
        ap_reg_pp0_iter26_exitcond_i_reg_357 <= ap_reg_pp0_iter25_exitcond_i_reg_357;
        ap_reg_pp0_iter26_tmp_64_reg_406 <= ap_reg_pp0_iter25_tmp_64_reg_406;
        ap_reg_pp0_iter26_tmp_66_reg_411 <= ap_reg_pp0_iter25_tmp_66_reg_411;
        ap_reg_pp0_iter26_tmp_V_reg_416 <= ap_reg_pp0_iter25_tmp_V_reg_416;
        ap_reg_pp0_iter27_exitcond_i_reg_357 <= ap_reg_pp0_iter26_exitcond_i_reg_357;
        ap_reg_pp0_iter27_tmp_64_reg_406 <= ap_reg_pp0_iter26_tmp_64_reg_406;
        ap_reg_pp0_iter27_tmp_66_reg_411 <= ap_reg_pp0_iter26_tmp_66_reg_411;
        ap_reg_pp0_iter27_tmp_V_reg_416 <= ap_reg_pp0_iter26_tmp_V_reg_416;
        ap_reg_pp0_iter28_exitcond_i_reg_357 <= ap_reg_pp0_iter27_exitcond_i_reg_357;
        ap_reg_pp0_iter28_tmp_64_reg_406 <= ap_reg_pp0_iter27_tmp_64_reg_406;
        ap_reg_pp0_iter28_tmp_66_reg_411 <= ap_reg_pp0_iter27_tmp_66_reg_411;
        ap_reg_pp0_iter28_tmp_V_reg_416 <= ap_reg_pp0_iter27_tmp_V_reg_416;
        ap_reg_pp0_iter29_exitcond_i_reg_357 <= ap_reg_pp0_iter28_exitcond_i_reg_357;
        ap_reg_pp0_iter29_tmp_66_reg_411 <= ap_reg_pp0_iter28_tmp_66_reg_411;
        ap_reg_pp0_iter29_tmp_V_reg_416 <= ap_reg_pp0_iter28_tmp_V_reg_416;
        ap_reg_pp0_iter2_exitcond_i_reg_357 <= ap_reg_pp0_iter1_exitcond_i_reg_357;
        ap_reg_pp0_iter2_tmp_64_reg_406 <= tmp_64_reg_406;
        ap_reg_pp0_iter2_tmp_66_reg_411 <= tmp_66_reg_411;
        ap_reg_pp0_iter2_tmp_V_reg_416 <= tmp_V_reg_416;
        ap_reg_pp0_iter30_exitcond_i_reg_357 <= ap_reg_pp0_iter29_exitcond_i_reg_357;
        ap_reg_pp0_iter30_tmp_66_reg_411 <= ap_reg_pp0_iter29_tmp_66_reg_411;
        ap_reg_pp0_iter30_tmp_V_reg_416 <= ap_reg_pp0_iter29_tmp_V_reg_416;
        ap_reg_pp0_iter31_exitcond_i_reg_357 <= ap_reg_pp0_iter30_exitcond_i_reg_357;
        ap_reg_pp0_iter31_tmp_66_reg_411 <= ap_reg_pp0_iter30_tmp_66_reg_411;
        ap_reg_pp0_iter31_tmp_V_reg_416 <= ap_reg_pp0_iter30_tmp_V_reg_416;
        ap_reg_pp0_iter32_exitcond_i_reg_357 <= ap_reg_pp0_iter31_exitcond_i_reg_357;
        ap_reg_pp0_iter32_tmp_66_reg_411 <= ap_reg_pp0_iter31_tmp_66_reg_411;
        ap_reg_pp0_iter32_tmp_V_reg_416 <= ap_reg_pp0_iter31_tmp_V_reg_416;
        ap_reg_pp0_iter33_exitcond_i_reg_357 <= ap_reg_pp0_iter32_exitcond_i_reg_357;
        ap_reg_pp0_iter33_tmp_66_reg_411 <= ap_reg_pp0_iter32_tmp_66_reg_411;
        ap_reg_pp0_iter33_tmp_V_reg_416 <= ap_reg_pp0_iter32_tmp_V_reg_416;
        ap_reg_pp0_iter34_exitcond_i_reg_357 <= ap_reg_pp0_iter33_exitcond_i_reg_357;
        ap_reg_pp0_iter34_tmp_66_reg_411 <= ap_reg_pp0_iter33_tmp_66_reg_411;
        ap_reg_pp0_iter34_tmp_V_reg_416 <= ap_reg_pp0_iter33_tmp_V_reg_416;
        ap_reg_pp0_iter35_exitcond_i_reg_357 <= ap_reg_pp0_iter34_exitcond_i_reg_357;
        ap_reg_pp0_iter35_tmp_66_reg_411 <= ap_reg_pp0_iter34_tmp_66_reg_411;
        ap_reg_pp0_iter35_tmp_V_reg_416 <= ap_reg_pp0_iter34_tmp_V_reg_416;
        ap_reg_pp0_iter36_exitcond_i_reg_357 <= ap_reg_pp0_iter35_exitcond_i_reg_357;
        ap_reg_pp0_iter36_tmp_66_reg_411 <= ap_reg_pp0_iter35_tmp_66_reg_411;
        ap_reg_pp0_iter36_tmp_V_reg_416 <= ap_reg_pp0_iter35_tmp_V_reg_416;
        ap_reg_pp0_iter37_exitcond_i_reg_357 <= ap_reg_pp0_iter36_exitcond_i_reg_357;
        ap_reg_pp0_iter3_exitcond_i_reg_357 <= ap_reg_pp0_iter2_exitcond_i_reg_357;
        ap_reg_pp0_iter3_tmp_64_reg_406 <= ap_reg_pp0_iter2_tmp_64_reg_406;
        ap_reg_pp0_iter3_tmp_66_reg_411 <= ap_reg_pp0_iter2_tmp_66_reg_411;
        ap_reg_pp0_iter3_tmp_V_reg_416 <= ap_reg_pp0_iter2_tmp_V_reg_416;
        ap_reg_pp0_iter4_exitcond_i_reg_357 <= ap_reg_pp0_iter3_exitcond_i_reg_357;
        ap_reg_pp0_iter4_tmp_64_reg_406 <= ap_reg_pp0_iter3_tmp_64_reg_406;
        ap_reg_pp0_iter4_tmp_66_reg_411 <= ap_reg_pp0_iter3_tmp_66_reg_411;
        ap_reg_pp0_iter4_tmp_V_reg_416 <= ap_reg_pp0_iter3_tmp_V_reg_416;
        ap_reg_pp0_iter5_exitcond_i_reg_357 <= ap_reg_pp0_iter4_exitcond_i_reg_357;
        ap_reg_pp0_iter5_tmp_64_reg_406 <= ap_reg_pp0_iter4_tmp_64_reg_406;
        ap_reg_pp0_iter5_tmp_66_reg_411 <= ap_reg_pp0_iter4_tmp_66_reg_411;
        ap_reg_pp0_iter5_tmp_V_reg_416 <= ap_reg_pp0_iter4_tmp_V_reg_416;
        ap_reg_pp0_iter6_exitcond_i_reg_357 <= ap_reg_pp0_iter5_exitcond_i_reg_357;
        ap_reg_pp0_iter6_tmp_64_reg_406 <= ap_reg_pp0_iter5_tmp_64_reg_406;
        ap_reg_pp0_iter6_tmp_66_reg_411 <= ap_reg_pp0_iter5_tmp_66_reg_411;
        ap_reg_pp0_iter6_tmp_V_reg_416 <= ap_reg_pp0_iter5_tmp_V_reg_416;
        ap_reg_pp0_iter7_exitcond_i_reg_357 <= ap_reg_pp0_iter6_exitcond_i_reg_357;
        ap_reg_pp0_iter7_tmp_64_reg_406 <= ap_reg_pp0_iter6_tmp_64_reg_406;
        ap_reg_pp0_iter7_tmp_66_reg_411 <= ap_reg_pp0_iter6_tmp_66_reg_411;
        ap_reg_pp0_iter7_tmp_V_reg_416 <= ap_reg_pp0_iter6_tmp_V_reg_416;
        ap_reg_pp0_iter8_exitcond_i_reg_357 <= ap_reg_pp0_iter7_exitcond_i_reg_357;
        ap_reg_pp0_iter8_tmp_64_reg_406 <= ap_reg_pp0_iter7_tmp_64_reg_406;
        ap_reg_pp0_iter8_tmp_66_reg_411 <= ap_reg_pp0_iter7_tmp_66_reg_411;
        ap_reg_pp0_iter8_tmp_V_reg_416 <= ap_reg_pp0_iter7_tmp_V_reg_416;
        ap_reg_pp0_iter9_exitcond_i_reg_357 <= ap_reg_pp0_iter8_exitcond_i_reg_357;
        ap_reg_pp0_iter9_tmp_64_reg_406 <= ap_reg_pp0_iter8_tmp_64_reg_406;
        ap_reg_pp0_iter9_tmp_66_reg_411 <= ap_reg_pp0_iter8_tmp_66_reg_411;
        ap_reg_pp0_iter9_tmp_V_reg_416 <= ap_reg_pp0_iter8_tmp_V_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_i_reg_357 <= exitcond_i_reg_357;
        exitcond_i_reg_357 <= exitcond_i_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (output_size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_size_read_reg_352 <= output_size_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_data_1_load_A == 1'b1)) begin
        output_stream_V_data_1_payload_A <= grp_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_data_1_load_B == 1'b1)) begin
        output_stream_V_data_1_payload_B <= grp_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_keep_V_1_load_A == 1'b1)) begin
        output_stream_V_keep_V_1_payload_A <= ap_reg_pp0_iter36_tmp_V_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_keep_V_1_load_B == 1'b1)) begin
        output_stream_V_keep_V_1_payload_B <= ap_reg_pp0_iter36_tmp_V_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_last_1_load_A == 1'b1)) begin
        output_stream_V_last_1_payload_A <= ap_reg_pp0_iter36_tmp_66_reg_411;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_last_1_load_B == 1'b1)) begin
        output_stream_V_last_1_payload_B <= ap_reg_pp0_iter36_tmp_66_reg_411;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter27_exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_product_tmp0123_reg_451 <= grp_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter18_exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_product_tmp01_reg_441 <= grp_fu_324_p2;
        row_product_tmp23_reg_446 <= grp_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter9_exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_product_tmp0_reg_421 <= grp_fu_308_p2;
        row_product_tmp1_reg_426 <= grp_fu_312_p2;
        row_product_tmp2_reg_431 <= grp_fu_316_p2;
        row_product_tmp3_reg_436 <= grp_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_57_reg_371 <= row_product_1_fifo_V_dout;
        tmp_58_reg_376 <= row_product_2_fifo_V_dout;
        tmp_59_reg_381 <= row_product_3_fifo_V_dout;
        tmp_60_reg_386 <= row_product_4_fifo_V_dout;
        tmp_61_reg_391 <= row_product_5_fifo_V_dout;
        tmp_62_reg_396 <= row_product_6_fifo_V_dout;
        tmp_63_reg_401 <= row_product_7_fifo_V_dout;
        tmp_64_reg_406 <= row_product_8_fifo_V_dout;
        tmp_66_reg_411 <= tlast_fifo_V_dout;
        tmp_V_reg_416 <= tkeep_fifo_V_V_dout;
        tmp_reg_366 <= row_product_0_fifo_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_341_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_stream_V_data_1_ack_in == 1'b0) | (output_stream_V_last_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_stream_V_data_1_ack_in == 1'b0) | (output_stream_V_last_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_308_ce = 1'b1;
    end else begin
        grp_fu_308_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_312_ce = 1'b1;
    end else begin
        grp_fu_312_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_316_ce = 1'b1;
    end else begin
        grp_fu_316_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_320_ce = 1'b1;
    end else begin
        grp_fu_320_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_324_ce = 1'b1;
    end else begin
        grp_fu_324_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_328_ce = 1'b1;
    end else begin
        grp_fu_328_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_332_ce = 1'b1;
    end else begin
        grp_fu_332_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_336_ce = 1'b1;
    end else begin
        grp_fu_336_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_size_blk_n = output_size_empty_n;
    end else begin
        output_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_size_read = 1'b1;
    end else begin
        output_size_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp0_iter37_exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter38 == 1'b1)) | ((ap_reg_pp0_iter36_exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter37 == 1'b1)))) begin
        output_stream_TDATA_blk_n = output_stream_V_data_1_state[1'd1];
    end else begin
        output_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((output_stream_V_data_1_sel == 1'b1)) begin
        output_stream_V_data_1_data_out = output_stream_V_data_1_payload_B;
    end else begin
        output_stream_V_data_1_data_out = output_stream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter36_exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1))) begin
        output_stream_V_data_1_vld_in = 1'b1;
    end else begin
        output_stream_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_stream_V_keep_V_1_sel == 1'b1)) begin
        output_stream_V_keep_V_1_data_out = output_stream_V_keep_V_1_payload_B;
    end else begin
        output_stream_V_keep_V_1_data_out = output_stream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter36_exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1))) begin
        output_stream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        output_stream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_stream_V_last_1_sel == 1'b1)) begin
        output_stream_V_last_1_data_out = output_stream_V_last_1_payload_B;
    end else begin
        output_stream_V_last_1_data_out = output_stream_V_last_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter36_exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1))) begin
        output_stream_V_last_1_vld_in = 1'b1;
    end else begin
        output_stream_V_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_0_fifo_V_blk_n = row_product_0_fifo_V_empty_n;
    end else begin
        row_product_0_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_0_fifo_V_read = 1'b1;
    end else begin
        row_product_0_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_1_fifo_V_blk_n = row_product_1_fifo_V_empty_n;
    end else begin
        row_product_1_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_1_fifo_V_read = 1'b1;
    end else begin
        row_product_1_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_2_fifo_V_blk_n = row_product_2_fifo_V_empty_n;
    end else begin
        row_product_2_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_2_fifo_V_read = 1'b1;
    end else begin
        row_product_2_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_3_fifo_V_blk_n = row_product_3_fifo_V_empty_n;
    end else begin
        row_product_3_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_3_fifo_V_read = 1'b1;
    end else begin
        row_product_3_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_4_fifo_V_blk_n = row_product_4_fifo_V_empty_n;
    end else begin
        row_product_4_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_4_fifo_V_read = 1'b1;
    end else begin
        row_product_4_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_5_fifo_V_blk_n = row_product_5_fifo_V_empty_n;
    end else begin
        row_product_5_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_5_fifo_V_read = 1'b1;
    end else begin
        row_product_5_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_6_fifo_V_blk_n = row_product_6_fifo_V_empty_n;
    end else begin
        row_product_6_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_6_fifo_V_read = 1'b1;
    end else begin
        row_product_6_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_7_fifo_V_blk_n = row_product_7_fifo_V_empty_n;
    end else begin
        row_product_7_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_7_fifo_V_read = 1'b1;
    end else begin
        row_product_7_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_8_fifo_V_blk_n = row_product_8_fifo_V_empty_n;
    end else begin
        row_product_8_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_product_8_fifo_V_read = 1'b1;
    end else begin
        row_product_8_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tkeep_fifo_V_V_blk_n = tkeep_fifo_V_V_empty_n;
    end else begin
        tkeep_fifo_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tkeep_fifo_V_V_read = 1'b1;
    end else begin
        tkeep_fifo_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tlast_fifo_V_blk_n = tlast_fifo_V_empty_n;
    end else begin
        tlast_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tlast_fifo_V_read = 1'b1;
    end else begin
        tlast_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (output_size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_i_fu_341_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_i_fu_341_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            if ((~((output_stream_V_data_1_ack_in == 1'b0) | (output_stream_V_last_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_357 == 1'd0) & (tkeep_fifo_V_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (tlast_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_8_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_7_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_6_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_5_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_4_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_3_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_2_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_1_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_0_fifo_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp0_iter38 == 1'b1)) | ((1'b1 == ap_block_state39_io) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_357 == 1'd0) & (tkeep_fifo_V_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (tlast_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_8_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_7_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_6_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_5_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_4_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_3_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_2_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_1_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_0_fifo_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp0_iter38 == 1'b1)) | ((1'b1 == ap_block_state39_io) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_357 == 1'd0) & (tkeep_fifo_V_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (tlast_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_8_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_7_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_6_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_5_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_4_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_3_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_2_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_1_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_0_fifo_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (output_size_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39_io = ((ap_reg_pp0_iter36_exitcond_i_reg_357 == 1'd0) & (output_stream_V_data_1_ack_in == 1'b0));
end

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_i_reg_357 == 1'd0) & (tkeep_fifo_V_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (tlast_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_8_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_7_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_6_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_5_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_4_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_3_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_2_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_1_fifo_V_empty_n == 1'b0)) | ((exitcond_i_reg_357 == 1'd0) & (row_product_0_fifo_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state40_io = ((ap_reg_pp0_iter37_exitcond_i_reg_357 == 1'd0) & (output_stream_V_data_1_ack_in == 1'b0));
end

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41 = ((output_stream_V_data_1_ack_in == 1'b0) | (output_stream_V_last_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_i_fu_341_p2 = ((i3_i_reg_297 == output_size_read_reg_352) ? 1'b1 : 1'b0);

assign i_fu_346_p2 = (i3_i_reg_297 + 32'd1);

assign output_stream_TDATA = output_stream_V_data_1_data_out;

assign output_stream_TKEEP = output_stream_V_keep_V_1_data_out;

assign output_stream_TLAST = output_stream_V_last_1_data_out;

assign output_stream_TVALID = output_stream_V_last_1_state[1'd0];

assign output_stream_V_data_1_ack_in = output_stream_V_data_1_state[1'd1];

assign output_stream_V_data_1_ack_out = output_stream_TREADY;

assign output_stream_V_data_1_load_A = (output_stream_V_data_1_state_cmp_full & ~output_stream_V_data_1_sel_wr);

assign output_stream_V_data_1_load_B = (output_stream_V_data_1_state_cmp_full & output_stream_V_data_1_sel_wr);

assign output_stream_V_data_1_sel = output_stream_V_data_1_sel_rd;

assign output_stream_V_data_1_state_cmp_full = ((output_stream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_data_1_vld_out = output_stream_V_data_1_state[1'd0];

assign output_stream_V_keep_V_1_ack_in = output_stream_V_keep_V_1_state[1'd1];

assign output_stream_V_keep_V_1_ack_out = output_stream_TREADY;

assign output_stream_V_keep_V_1_load_A = (output_stream_V_keep_V_1_state_cmp_full & ~output_stream_V_keep_V_1_sel_wr);

assign output_stream_V_keep_V_1_load_B = (output_stream_V_keep_V_1_state_cmp_full & output_stream_V_keep_V_1_sel_wr);

assign output_stream_V_keep_V_1_sel = output_stream_V_keep_V_1_sel_rd;

assign output_stream_V_keep_V_1_state_cmp_full = ((output_stream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_keep_V_1_vld_out = output_stream_V_keep_V_1_state[1'd0];

assign output_stream_V_last_1_ack_in = output_stream_V_last_1_state[1'd1];

assign output_stream_V_last_1_ack_out = output_stream_TREADY;

assign output_stream_V_last_1_load_A = (output_stream_V_last_1_state_cmp_full & ~output_stream_V_last_1_sel_wr);

assign output_stream_V_last_1_load_B = (output_stream_V_last_1_state_cmp_full & output_stream_V_last_1_sel_wr);

assign output_stream_V_last_1_sel = output_stream_V_last_1_sel_rd;

assign output_stream_V_last_1_state_cmp_full = ((output_stream_V_last_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_last_1_vld_out = output_stream_V_last_1_state[1'd0];

endmodule //Loop_4_proc36
