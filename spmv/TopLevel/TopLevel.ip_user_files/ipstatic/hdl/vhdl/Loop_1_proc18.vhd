-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc18 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    val_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_size_empty_n : IN STD_LOGIC;
    val_size_read : OUT STD_LOGIC;
    val_col_ind_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    val_col_ind_stream_TVALID : IN STD_LOGIC;
    val_col_ind_stream_TREADY : OUT STD_LOGIC;
    val_col_ind_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    val_col_ind_stream_TLAST : IN STD_LOGIC;
    val_fifo_tmp_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_fifo_tmp_V_full_n : IN STD_LOGIC;
    val_fifo_tmp_V_write : OUT STD_LOGIC;
    col_ind_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    col_ind_fifo_V_full_n : IN STD_LOGIC;
    col_ind_fifo_V_write : OUT STD_LOGIC;
    val_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_size_out_full_n : IN STD_LOGIC;
    val_size_out_write : OUT STD_LOGIC );
end;


architecture behav of Loop_1_proc18 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal val_col_ind_stream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal val_col_ind_stream_V_data_0_vld_in : STD_LOGIC;
    signal val_col_ind_stream_V_data_0_vld_out : STD_LOGIC;
    signal val_col_ind_stream_V_data_0_ack_in : STD_LOGIC;
    signal val_col_ind_stream_V_data_0_ack_out : STD_LOGIC;
    signal val_col_ind_stream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal val_col_ind_stream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal val_col_ind_stream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal val_col_ind_stream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal val_col_ind_stream_V_data_0_sel : STD_LOGIC;
    signal val_col_ind_stream_V_data_0_load_A : STD_LOGIC;
    signal val_col_ind_stream_V_data_0_load_B : STD_LOGIC;
    signal val_col_ind_stream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal val_col_ind_stream_V_data_0_state_cmp_full : STD_LOGIC;
    signal val_col_ind_stream_V_last_0_vld_in : STD_LOGIC;
    signal val_col_ind_stream_V_last_0_ack_out : STD_LOGIC;
    signal val_col_ind_stream_V_last_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal val_size_blk_n : STD_LOGIC;
    signal val_col_ind_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_i_reg_195 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_fifo_tmp_V_blk_n : STD_LOGIC;
    signal col_ind_fifo_V_blk_n : STD_LOGIC;
    signal val_size_out_blk_n : STD_LOGIC;
    signal i_i_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_size_read_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond1_i_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (val_size_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (val_size_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    val_col_ind_stream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                val_col_ind_stream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((val_col_ind_stream_V_data_0_ack_out = ap_const_logic_1) and (val_col_ind_stream_V_data_0_vld_out = ap_const_logic_1))) then 
                                        val_col_ind_stream_V_data_0_sel_rd <= not(val_col_ind_stream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    val_col_ind_stream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                val_col_ind_stream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((val_col_ind_stream_V_data_0_ack_in = ap_const_logic_1) and (val_col_ind_stream_V_data_0_vld_in = ap_const_logic_1))) then 
                                        val_col_ind_stream_V_data_0_sel_wr <= not(val_col_ind_stream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    val_col_ind_stream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                val_col_ind_stream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((val_col_ind_stream_V_data_0_state = ap_const_lv2_2) and (val_col_ind_stream_V_data_0_vld_in = ap_const_logic_0)) or ((val_col_ind_stream_V_data_0_state = ap_const_lv2_3) and (val_col_ind_stream_V_data_0_vld_in = ap_const_logic_0) and (val_col_ind_stream_V_data_0_ack_out = ap_const_logic_1)))) then 
                    val_col_ind_stream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((val_col_ind_stream_V_data_0_state = ap_const_lv2_1) and (val_col_ind_stream_V_data_0_ack_out = ap_const_logic_0)) or ((val_col_ind_stream_V_data_0_state = ap_const_lv2_3) and (val_col_ind_stream_V_data_0_ack_out = ap_const_logic_0) and (val_col_ind_stream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    val_col_ind_stream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((val_col_ind_stream_V_data_0_vld_in = ap_const_logic_0) and (val_col_ind_stream_V_data_0_ack_out = ap_const_logic_1))) and not(((val_col_ind_stream_V_data_0_ack_out = ap_const_logic_0) and (val_col_ind_stream_V_data_0_vld_in = ap_const_logic_1))) and (val_col_ind_stream_V_data_0_state = ap_const_lv2_3)) or ((val_col_ind_stream_V_data_0_state = ap_const_lv2_1) and (val_col_ind_stream_V_data_0_ack_out = ap_const_logic_1)) or ((val_col_ind_stream_V_data_0_state = ap_const_lv2_2) and (val_col_ind_stream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    val_col_ind_stream_V_data_0_state <= ap_const_lv2_3;
                else 
                    val_col_ind_stream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    val_col_ind_stream_V_last_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                val_col_ind_stream_V_last_0_state <= ap_const_lv2_0;
            else
                if ((((val_col_ind_stream_V_last_0_state = ap_const_lv2_2) and (val_col_ind_stream_V_last_0_vld_in = ap_const_logic_0)) or ((val_col_ind_stream_V_last_0_state = ap_const_lv2_3) and (val_col_ind_stream_V_last_0_vld_in = ap_const_logic_0) and (val_col_ind_stream_V_last_0_ack_out = ap_const_logic_1)))) then 
                    val_col_ind_stream_V_last_0_state <= ap_const_lv2_2;
                elsif ((((val_col_ind_stream_V_last_0_state = ap_const_lv2_1) and (val_col_ind_stream_V_last_0_ack_out = ap_const_logic_0)) or ((val_col_ind_stream_V_last_0_state = ap_const_lv2_3) and (val_col_ind_stream_V_last_0_ack_out = ap_const_logic_0) and (val_col_ind_stream_V_last_0_vld_in = ap_const_logic_1)))) then 
                    val_col_ind_stream_V_last_0_state <= ap_const_lv2_1;
                elsif (((not(((val_col_ind_stream_V_last_0_vld_in = ap_const_logic_0) and (val_col_ind_stream_V_last_0_ack_out = ap_const_logic_1))) and not(((val_col_ind_stream_V_last_0_ack_out = ap_const_logic_0) and (val_col_ind_stream_V_last_0_vld_in = ap_const_logic_1))) and (val_col_ind_stream_V_last_0_state = ap_const_lv2_3)) or ((val_col_ind_stream_V_last_0_state = ap_const_lv2_1) and (val_col_ind_stream_V_last_0_ack_out = ap_const_logic_1)) or ((val_col_ind_stream_V_last_0_state = ap_const_lv2_2) and (val_col_ind_stream_V_last_0_vld_in = ap_const_logic_1)))) then 
                    val_col_ind_stream_V_last_0_state <= ap_const_lv2_3;
                else 
                    val_col_ind_stream_V_last_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_155_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_i_reg_144 <= i_fu_160_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (val_size_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_144 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_i_reg_195 <= exitcond1_i_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((val_col_ind_stream_V_data_0_load_A = ap_const_logic_1)) then
                val_col_ind_stream_V_data_0_payload_A <= val_col_ind_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((val_col_ind_stream_V_data_0_load_B = ap_const_logic_1)) then
                val_col_ind_stream_V_data_0_payload_B <= val_col_ind_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (val_size_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                val_size_read_reg_190 <= val_size_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, val_size_empty_n, val_size_out_full_n, exitcond1_i_fu_155_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (val_size_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond1_i_fu_155_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond1_i_fu_155_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(val_col_ind_stream_V_data_0_vld_out, val_fifo_tmp_V_full_n, col_ind_fifo_V_full_n, ap_enable_reg_pp0_iter1, exitcond1_i_reg_195)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond1_i_reg_195 = ap_const_lv1_0) and (col_ind_fifo_V_full_n = ap_const_logic_0)) or ((exitcond1_i_reg_195 = ap_const_lv1_0) and (val_fifo_tmp_V_full_n = ap_const_logic_0)) or ((exitcond1_i_reg_195 = ap_const_lv1_0) and (val_col_ind_stream_V_data_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(val_col_ind_stream_V_data_0_vld_out, val_fifo_tmp_V_full_n, col_ind_fifo_V_full_n, ap_enable_reg_pp0_iter1, exitcond1_i_reg_195)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond1_i_reg_195 = ap_const_lv1_0) and (col_ind_fifo_V_full_n = ap_const_logic_0)) or ((exitcond1_i_reg_195 = ap_const_lv1_0) and (val_fifo_tmp_V_full_n = ap_const_logic_0)) or ((exitcond1_i_reg_195 = ap_const_lv1_0) and (val_col_ind_stream_V_data_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(val_col_ind_stream_V_data_0_vld_out, val_fifo_tmp_V_full_n, col_ind_fifo_V_full_n, ap_enable_reg_pp0_iter1, exitcond1_i_reg_195)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond1_i_reg_195 = ap_const_lv1_0) and (col_ind_fifo_V_full_n = ap_const_logic_0)) or ((exitcond1_i_reg_195 = ap_const_lv1_0) and (val_fifo_tmp_V_full_n = ap_const_logic_0)) or ((exitcond1_i_reg_195 = ap_const_lv1_0) and (val_col_ind_stream_V_data_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, val_size_empty_n, val_size_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (val_size_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(val_col_ind_stream_V_data_0_vld_out, val_fifo_tmp_V_full_n, col_ind_fifo_V_full_n, exitcond1_i_reg_195)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((exitcond1_i_reg_195 = ap_const_lv1_0) and (col_ind_fifo_V_full_n = ap_const_logic_0)) or ((exitcond1_i_reg_195 = ap_const_lv1_0) and (val_fifo_tmp_V_full_n = ap_const_logic_0)) or ((exitcond1_i_reg_195 = ap_const_lv1_0) and (val_col_ind_stream_V_data_0_vld_out = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_i_fu_155_p2)
    begin
        if ((exitcond1_i_fu_155_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    col_ind_fifo_V_blk_n_assign_proc : process(col_ind_fifo_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_i_reg_195)
    begin
        if (((exitcond1_i_reg_195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_ind_fifo_V_blk_n <= col_ind_fifo_V_full_n;
        else 
            col_ind_fifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_ind_fifo_V_din <= val_col_ind_stream_V_data_0_data_out(63 downto 32);

    col_ind_fifo_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_i_reg_195, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_i_reg_195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_ind_fifo_V_write <= ap_const_logic_1;
        else 
            col_ind_fifo_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_155_p2 <= "1" when (i_i_reg_144 = val_size_read_reg_190) else "0";
    i_fu_160_p2 <= std_logic_vector(unsigned(i_i_reg_144) + unsigned(ap_const_lv32_1));
    tmp_fu_170_p1 <= val_col_ind_stream_V_data_0_data_out(32 - 1 downto 0);

    val_col_ind_stream_TDATA_blk_n_assign_proc : process(val_col_ind_stream_V_data_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_i_reg_195)
    begin
        if (((exitcond1_i_reg_195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            val_col_ind_stream_TDATA_blk_n <= val_col_ind_stream_V_data_0_state(0);
        else 
            val_col_ind_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    val_col_ind_stream_TREADY <= val_col_ind_stream_V_last_0_state(1);
    val_col_ind_stream_V_data_0_ack_in <= val_col_ind_stream_V_data_0_state(1);

    val_col_ind_stream_V_data_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_i_reg_195, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_i_reg_195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            val_col_ind_stream_V_data_0_ack_out <= ap_const_logic_1;
        else 
            val_col_ind_stream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    val_col_ind_stream_V_data_0_data_out_assign_proc : process(val_col_ind_stream_V_data_0_payload_A, val_col_ind_stream_V_data_0_payload_B, val_col_ind_stream_V_data_0_sel)
    begin
        if ((val_col_ind_stream_V_data_0_sel = ap_const_logic_1)) then 
            val_col_ind_stream_V_data_0_data_out <= val_col_ind_stream_V_data_0_payload_B;
        else 
            val_col_ind_stream_V_data_0_data_out <= val_col_ind_stream_V_data_0_payload_A;
        end if; 
    end process;

    val_col_ind_stream_V_data_0_load_A <= (val_col_ind_stream_V_data_0_state_cmp_full and not(val_col_ind_stream_V_data_0_sel_wr));
    val_col_ind_stream_V_data_0_load_B <= (val_col_ind_stream_V_data_0_state_cmp_full and val_col_ind_stream_V_data_0_sel_wr);
    val_col_ind_stream_V_data_0_sel <= val_col_ind_stream_V_data_0_sel_rd;
    val_col_ind_stream_V_data_0_state_cmp_full <= '0' when (val_col_ind_stream_V_data_0_state = ap_const_lv2_1) else '1';
    val_col_ind_stream_V_data_0_vld_in <= val_col_ind_stream_TVALID;
    val_col_ind_stream_V_data_0_vld_out <= val_col_ind_stream_V_data_0_state(0);

    val_col_ind_stream_V_last_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_i_reg_195, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_i_reg_195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            val_col_ind_stream_V_last_0_ack_out <= ap_const_logic_1;
        else 
            val_col_ind_stream_V_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    val_col_ind_stream_V_last_0_vld_in <= val_col_ind_stream_TVALID;

    val_fifo_tmp_V_blk_n_assign_proc : process(val_fifo_tmp_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_i_reg_195)
    begin
        if (((exitcond1_i_reg_195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            val_fifo_tmp_V_blk_n <= val_fifo_tmp_V_full_n;
        else 
            val_fifo_tmp_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    val_fifo_tmp_V_din <= tmp_fu_170_p1;

    val_fifo_tmp_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_i_reg_195, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_i_reg_195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            val_fifo_tmp_V_write <= ap_const_logic_1;
        else 
            val_fifo_tmp_V_write <= ap_const_logic_0;
        end if; 
    end process;


    val_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_size_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_size_blk_n <= val_size_empty_n;
        else 
            val_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    val_size_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_size_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_size_out_blk_n <= val_size_out_full_n;
        else 
            val_size_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    val_size_out_din <= val_size_dout;

    val_size_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_size_empty_n, val_size_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (val_size_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_size_out_write <= ap_const_logic_1;
        else 
            val_size_out_write <= ap_const_logic_0;
        end if; 
    end process;


    val_size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_size_empty_n, val_size_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (val_size_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_size_read <= ap_const_logic_1;
        else 
            val_size_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
