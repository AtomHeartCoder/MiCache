-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_4_proc21 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    val_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_size_empty_n : IN STD_LOGIC;
    val_size_read : OUT STD_LOGIC;
    val_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_fifo_V_empty_n : IN STD_LOGIC;
    val_fifo_V_read : OUT STD_LOGIC;
    vect_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    vect_fifo_V_empty_n : IN STD_LOGIC;
    vect_fifo_V_read : OUT STD_LOGIC;
    output_stream_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_stream_V_TVALID : OUT STD_LOGIC;
    output_stream_V_TREADY : IN STD_LOGIC );
end;


architecture behav of Loop_4_proc21 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_stream_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal output_stream_V_1_vld_in : STD_LOGIC;
    signal output_stream_V_1_vld_out : STD_LOGIC;
    signal output_stream_V_1_ack_in : STD_LOGIC;
    signal output_stream_V_1_ack_out : STD_LOGIC;
    signal output_stream_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal output_stream_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal output_stream_V_1_sel_rd : STD_LOGIC := '0';
    signal output_stream_V_1_sel_wr : STD_LOGIC := '0';
    signal output_stream_V_1_sel : STD_LOGIC;
    signal output_stream_V_1_load_A : STD_LOGIC;
    signal output_stream_V_1_load_B : STD_LOGIC;
    signal output_stream_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_stream_V_1_state_cmp_full : STD_LOGIC;
    signal val_size_blk_n : STD_LOGIC;
    signal val_fifo_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal vect_fifo_V_blk_n : STD_LOGIC;
    signal output_stream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter5_exitcond_i_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter6_exitcond_i_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_i_reg_103 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_size_read_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond_i_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_i_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_i_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_i_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_i_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_114_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component spmv_mult_axis_fmbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    spmv_mult_axis_fmbkb_U30 : component spmv_mult_axis_fmbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_144,
        din1 => tmp_1_reg_149,
        ce => grp_fu_114_ce,
        dout => grp_fu_114_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((output_stream_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_stream_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_stream_V_1_ack_out = ap_const_logic_1) and (output_stream_V_1_vld_out = ap_const_logic_1))) then 
                                        output_stream_V_1_sel_rd <= not(output_stream_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_stream_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_stream_V_1_ack_in = ap_const_logic_1) and (output_stream_V_1_vld_in = ap_const_logic_1))) then 
                                        output_stream_V_1_sel_wr <= not(output_stream_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_stream_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_stream_V_1_state = ap_const_lv2_2) and (output_stream_V_1_vld_in = ap_const_logic_0)) or ((output_stream_V_1_state = ap_const_lv2_3) and (output_stream_V_1_vld_in = ap_const_logic_0) and (output_stream_V_1_ack_out = ap_const_logic_1)))) then 
                    output_stream_V_1_state <= ap_const_lv2_2;
                elsif ((((output_stream_V_1_state = ap_const_lv2_1) and (output_stream_V_1_ack_out = ap_const_logic_0)) or ((output_stream_V_1_state = ap_const_lv2_3) and (output_stream_V_1_ack_out = ap_const_logic_0) and (output_stream_V_1_vld_in = ap_const_logic_1)))) then 
                    output_stream_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_stream_V_1_vld_in = ap_const_logic_0) and (output_stream_V_1_ack_out = ap_const_logic_1))) and not(((output_stream_V_1_ack_out = ap_const_logic_0) and (output_stream_V_1_vld_in = ap_const_logic_1))) and (output_stream_V_1_state = ap_const_lv2_3)) or ((output_stream_V_1_state = ap_const_lv2_1) and (output_stream_V_1_ack_out = ap_const_logic_1)) or ((output_stream_V_1_state = ap_const_lv2_2) and (output_stream_V_1_vld_in = ap_const_logic_1)))) then 
                    output_stream_V_1_state <= ap_const_lv2_3;
                else 
                    output_stream_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i3_i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i3_i_reg_103 <= ap_const_lv32_0;
            elsif (((exitcond_i_fu_119_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i3_i_reg_103 <= i_fu_124_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond_i_reg_135 <= exitcond_i_reg_135;
                exitcond_i_reg_135 <= exitcond_i_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_exitcond_i_reg_135 <= ap_reg_pp0_iter1_exitcond_i_reg_135;
                ap_reg_pp0_iter3_exitcond_i_reg_135 <= ap_reg_pp0_iter2_exitcond_i_reg_135;
                ap_reg_pp0_iter4_exitcond_i_reg_135 <= ap_reg_pp0_iter3_exitcond_i_reg_135;
                ap_reg_pp0_iter5_exitcond_i_reg_135 <= ap_reg_pp0_iter4_exitcond_i_reg_135;
                ap_reg_pp0_iter6_exitcond_i_reg_135 <= ap_reg_pp0_iter5_exitcond_i_reg_135;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_1_load_A = ap_const_logic_1)) then
                output_stream_V_1_payload_A <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_1_load_B = ap_const_logic_1)) then
                output_stream_V_1_payload_B <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_135 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_149 <= vect_fifo_V_dout;
                tmp_reg_144 <= val_fifo_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                val_size_read_reg_130 <= val_size_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, val_size_empty_n, output_stream_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, exitcond_i_fu_119_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_i_fu_119_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond_i_fu_119_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                if (((output_stream_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(val_fifo_V_empty_n, vect_fifo_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_135)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_135 = ap_const_lv1_0) and (vect_fifo_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_135 = ap_const_lv1_0) and (val_fifo_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(val_fifo_V_empty_n, vect_fifo_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_135, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_block_state8_io, ap_block_state9_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_135 = ap_const_lv1_0) and (vect_fifo_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_135 = ap_const_lv1_0) and (val_fifo_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(val_fifo_V_empty_n, vect_fifo_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_135, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_block_state8_io, ap_block_state9_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_135 = ap_const_lv1_0) and (vect_fifo_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_135 = ap_const_lv1_0) and (val_fifo_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, val_size_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(val_fifo_V_empty_n, vect_fifo_V_empty_n, exitcond_i_reg_135)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((exitcond_i_reg_135 = ap_const_lv1_0) and (vect_fifo_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_135 = ap_const_lv1_0) and (val_fifo_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(output_stream_V_1_ack_in, ap_reg_pp0_iter5_exitcond_i_reg_135)
    begin
                ap_block_state8_io <= ((ap_reg_pp0_iter5_exitcond_i_reg_135 = ap_const_lv1_0) and (output_stream_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(output_stream_V_1_ack_in, ap_reg_pp0_iter6_exitcond_i_reg_135)
    begin
                ap_block_state9_io <= ((ap_reg_pp0_iter6_exitcond_i_reg_135 = ap_const_lv1_0) and (output_stream_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_i_fu_119_p2)
    begin
        if ((exitcond_i_fu_119_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, output_stream_V_1_ack_in, ap_CS_fsm_state10)
    begin
        if (((output_stream_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_stream_V_1_ack_in, ap_CS_fsm_state10)
    begin
        if (((output_stream_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_119_p2 <= "1" when (i3_i_reg_103 = val_size_read_reg_130) else "0";

    grp_fu_114_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_114_ce <= ap_const_logic_1;
        else 
            grp_fu_114_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_124_p2 <= std_logic_vector(unsigned(i3_i_reg_103) + unsigned(ap_const_lv32_1));
    output_stream_V_1_ack_in <= output_stream_V_1_state(1);
    output_stream_V_1_ack_out <= output_stream_V_TREADY;

    output_stream_V_1_data_out_assign_proc : process(output_stream_V_1_payload_A, output_stream_V_1_payload_B, output_stream_V_1_sel)
    begin
        if ((output_stream_V_1_sel = ap_const_logic_1)) then 
            output_stream_V_1_data_out <= output_stream_V_1_payload_B;
        else 
            output_stream_V_1_data_out <= output_stream_V_1_payload_A;
        end if; 
    end process;

    output_stream_V_1_load_A <= (output_stream_V_1_state_cmp_full and not(output_stream_V_1_sel_wr));
    output_stream_V_1_load_B <= (output_stream_V_1_state_cmp_full and output_stream_V_1_sel_wr);
    output_stream_V_1_sel <= output_stream_V_1_sel_rd;
    output_stream_V_1_state_cmp_full <= '0' when (output_stream_V_1_state = ap_const_lv2_1) else '1';

    output_stream_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter6, ap_reg_pp0_iter5_exitcond_i_reg_135, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter5_exitcond_i_reg_135 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_stream_V_1_vld_in <= ap_const_logic_1;
        else 
            output_stream_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_stream_V_1_vld_out <= output_stream_V_1_state(0);
    output_stream_V_TDATA <= output_stream_V_1_data_out;

    output_stream_V_TDATA_blk_n_assign_proc : process(output_stream_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, ap_reg_pp0_iter5_exitcond_i_reg_135, ap_enable_reg_pp0_iter7, ap_reg_pp0_iter6_exitcond_i_reg_135)
    begin
        if ((((ap_reg_pp0_iter6_exitcond_i_reg_135 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_reg_pp0_iter5_exitcond_i_reg_135 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            output_stream_V_TDATA_blk_n <= output_stream_V_1_state(1);
        else 
            output_stream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_stream_V_TVALID <= output_stream_V_1_state(0);

    val_fifo_V_blk_n_assign_proc : process(val_fifo_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_135)
    begin
        if (((exitcond_i_reg_135 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            val_fifo_V_blk_n <= val_fifo_V_empty_n;
        else 
            val_fifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    val_fifo_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_135, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_135 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            val_fifo_V_read <= ap_const_logic_1;
        else 
            val_fifo_V_read <= ap_const_logic_0;
        end if; 
    end process;


    val_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_size_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_size_blk_n <= val_size_empty_n;
        else 
            val_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    val_size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_size_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_size_read <= ap_const_logic_1;
        else 
            val_size_read <= ap_const_logic_0;
        end if; 
    end process;


    vect_fifo_V_blk_n_assign_proc : process(vect_fifo_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_135)
    begin
        if (((exitcond_i_reg_135 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            vect_fifo_V_blk_n <= vect_fifo_V_empty_n;
        else 
            vect_fifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vect_fifo_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_135, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_135 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            vect_fifo_V_read <= ap_const_logic_1;
        else 
            vect_fifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
